{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,C,C,ECAA;;;;;+EAK+E,E,I,E,E,kD,E,iB,C,GAsY/E,EAAA,MAAA,CAAA,EAAA,OAAA,IACE,GADF,EAAA,MAAA,CAAA,EAAA,WAAA,IAEE,GApYF,IAAI,EAAO,CACT,SAAU,CACR,YAAa,KACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,AAAC,EAC5C,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,QAAS,CACP,QAAS,CACP,MAAO,AAAI,OAAO,6BAClB,IAAK,AAAI,OAAO,+BAClB,CACF,CACF,EACI,EAAW,CACb,aAAc,GACd,aAAc,OACd,SAAU,CACR,CAAE,MAAO,kBAAmB,KAAM,IAAK,MAAO,GAAI,EAClD,CAAE,MAAO,wBAAyB,KAAM,IAAK,MAAO,GAAI,EACxD,CAAE,MAAO,mBAAoB,KAAM,IAAK,MAAO,GAAI,EACnD,CAAE,MAAO,kBAAmB,KAAM,IAAK,MAAO,GAAI,EACnD,CACD,SAAU,CACR,WACA,MACA,QACA,OACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,YACA,aACA,WACA,MACA,WACA,UACA,WACA,SACA,KACA,SACA,eACA,OACA,OACA,OACA,QACA,WACA,SACA,SACA,QACA,QACA,UACA,QACA,MACA,SACA,QACA,UACA,OACA,KACA,KACA,WACA,SACA,MACA,YACA,eACA,WACA,UACA,OACA,UACA,YACA,MACA,WACA,UACA,YACA,WACA,WACA,UACA,SACA,UACA,UACA,WACA,YACA,SACA,MACA,WACA,mBACA,WACA,SACA,YACA,SACA,QACA,SACA,SACA,SACA,gBACA,cACA,SACA,SACA,WACA,OACA,eACA,QACA,cACA,OACA,MACA,UACA,SACA,WACA,QACA,WACA,QACA,UACA,OACA,WACA,UACA,QACA,QACA,OAEA,SACA,SACA,YACA,YACA,aACA,iBACA,UACA,wBACA,UACA,sBACA,WACA,uBACA,OACA,aAEA,YACA,QACA,WACA,UACA,QACA,oBACA,UACA,YACA,aACA,aACA,UACA,WACA,aACA,YACA,gBACA,OACA,SACA,eACA,cACA,kBACA,WACA,WACA,UACA,UACA,UACA,SACA,cACA,UACA,SACA,UACA,UACA,SACA,UACA,UACA,SACA,UACA,UACA,QACA,yBACA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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/cpp/cpp.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"4AYMJ\":[function(require,module,exports,__globalThis) {\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/cpp/cpp.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"conf\", ()=>conf);\nparcelHelpers.export(exports, \"language\", ()=>language);\nvar conf = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n        }\n    }\n};\nvar language = {\n    defaultToken: \"\",\n    tokenPostfix: \".cpp\",\n    brackets: [\n        {\n            token: \"delimiter.curly\",\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            token: \"delimiter.parenthesis\",\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            token: \"delimiter.square\",\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            token: \"delimiter.angle\",\n            open: \"<\",\n            close: \">\"\n        }\n    ],\n    keywords: [\n        \"abstract\",\n        \"amp\",\n        \"array\",\n        \"auto\",\n        \"bool\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"char\",\n        \"class\",\n        \"const\",\n        \"constexpr\",\n        \"const_cast\",\n        \"continue\",\n        \"cpu\",\n        \"decltype\",\n        \"default\",\n        \"delegate\",\n        \"delete\",\n        \"do\",\n        \"double\",\n        \"dynamic_cast\",\n        \"each\",\n        \"else\",\n        \"enum\",\n        \"event\",\n        \"explicit\",\n        \"export\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"finally\",\n        \"float\",\n        \"for\",\n        \"friend\",\n        \"gcnew\",\n        \"generic\",\n        \"goto\",\n        \"if\",\n        \"in\",\n        \"initonly\",\n        \"inline\",\n        \"int\",\n        \"interface\",\n        \"interior_ptr\",\n        \"internal\",\n        \"literal\",\n        \"long\",\n        \"mutable\",\n        \"namespace\",\n        \"new\",\n        \"noexcept\",\n        \"nullptr\",\n        \"__nullptr\",\n        \"operator\",\n        \"override\",\n        \"partial\",\n        \"pascal\",\n        \"pin_ptr\",\n        \"private\",\n        \"property\",\n        \"protected\",\n        \"public\",\n        \"ref\",\n        \"register\",\n        \"reinterpret_cast\",\n        \"restrict\",\n        \"return\",\n        \"safe_cast\",\n        \"sealed\",\n        \"short\",\n        \"signed\",\n        \"sizeof\",\n        \"static\",\n        \"static_assert\",\n        \"static_cast\",\n        \"struct\",\n        \"switch\",\n        \"template\",\n        \"this\",\n        \"thread_local\",\n        \"throw\",\n        \"tile_static\",\n        \"true\",\n        \"try\",\n        \"typedef\",\n        \"typeid\",\n        \"typename\",\n        \"union\",\n        \"unsigned\",\n        \"using\",\n        \"virtual\",\n        \"void\",\n        \"volatile\",\n        \"wchar_t\",\n        \"where\",\n        \"while\",\n        \"_asm\",\n        // reserved word with one underscores\n        \"_based\",\n        \"_cdecl\",\n        \"_declspec\",\n        \"_fastcall\",\n        \"_if_exists\",\n        \"_if_not_exists\",\n        \"_inline\",\n        \"_multiple_inheritance\",\n        \"_pascal\",\n        \"_single_inheritance\",\n        \"_stdcall\",\n        \"_virtual_inheritance\",\n        \"_w64\",\n        \"__abstract\",\n        // reserved word with two underscores\n        \"__alignof\",\n        \"__asm\",\n        \"__assume\",\n        \"__based\",\n        \"__box\",\n        \"__builtin_alignof\",\n        \"__cdecl\",\n        \"__clrcall\",\n        \"__declspec\",\n        \"__delegate\",\n        \"__event\",\n        \"__except\",\n        \"__fastcall\",\n        \"__finally\",\n        \"__forceinline\",\n        \"__gc\",\n        \"__hook\",\n        \"__identifier\",\n        \"__if_exists\",\n        \"__if_not_exists\",\n        \"__inline\",\n        \"__int128\",\n        \"__int16\",\n        \"__int32\",\n        \"__int64\",\n        \"__int8\",\n        \"__interface\",\n        \"__leave\",\n        \"__m128\",\n        \"__m128d\",\n        \"__m128i\",\n        \"__m256\",\n        \"__m256d\",\n        \"__m256i\",\n        \"__m512\",\n        \"__m512d\",\n        \"__m512i\",\n        \"__m64\",\n        \"__multiple_inheritance\",\n        \"__newslot\",\n        \"__nogc\",\n        \"__noop\",\n        \"__nounwind\",\n        \"__novtordisp\",\n        \"__pascal\",\n        \"__pin\",\n        \"__pragma\",\n        \"__property\",\n        \"__ptr32\",\n        \"__ptr64\",\n        \"__raise\",\n        \"__restrict\",\n        \"__resume\",\n        \"__sealed\",\n        \"__single_inheritance\",\n        \"__stdcall\",\n        \"__super\",\n        \"__thiscall\",\n        \"__try\",\n        \"__try_cast\",\n        \"__typeof\",\n        \"__unaligned\",\n        \"__unhook\",\n        \"__uuidof\",\n        \"__value\",\n        \"__virtual_inheritance\",\n        \"__w64\",\n        \"__wchar_t\"\n    ],\n    operators: [\n        \"=\",\n        \">\",\n        \"<\",\n        \"!\",\n        \"~\",\n        \"?\",\n        \":\",\n        \"==\",\n        \"<=\",\n        \">=\",\n        \"!=\",\n        \"&&\",\n        \"||\",\n        \"++\",\n        \"--\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"&\",\n        \"|\",\n        \"^\",\n        \"%\",\n        \"<<\",\n        \">>\",\n        \"+=\",\n        \"-=\",\n        \"*=\",\n        \"/=\",\n        \"&=\",\n        \"|=\",\n        \"^=\",\n        \"%=\",\n        \"<<=\",\n        \">>=\"\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n    floatsuffix: /[fFlL]?/,\n    encoding: /u|u8|U|L/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // C++ 11 Raw String\n            [\n                /@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/,\n                {\n                    token: \"string.raw.begin\",\n                    next: \"@raw.$1\"\n                }\n            ],\n            // identifiers and keywords\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword.$0\"\n                        },\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            // The preprocessor checks must be before whitespace as they check /^\\s*#/ which\n            // otherwise fails to match later after other whitespace has been removed.\n            // Inclusion\n            [\n                /^\\s*#\\s*include/,\n                {\n                    token: \"keyword.directive.include\",\n                    next: \"@include\"\n                }\n            ],\n            // Preprocessor directive\n            [\n                /^\\s*#\\s*\\w+/,\n                \"keyword.directive\"\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // [[ attributes ]].\n            [\n                /\\[\\s*\\[/,\n                {\n                    token: \"annotation\",\n                    next: \"@annotation\"\n                }\n            ],\n            // delimiters and operators\n            [\n                /[{}()<>\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"delimiter\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/,\n                \"number.float\"\n            ],\n            [\n                /\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/,\n                \"number.float\"\n            ],\n            [\n                /0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/,\n                \"number.hex\"\n            ],\n            [\n                /0[0-7']*[0-7](@integersuffix)/,\n                \"number.octal\"\n            ],\n            [\n                /0[bB][0-1']*[0-1](@integersuffix)/,\n                \"number.binary\"\n            ],\n            [\n                /\\d[\\d']*\\d(@integersuffix)/,\n                \"number\"\n            ],\n            [\n                /\\d(@integersuffix)/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // strings\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /\"/,\n                \"string\",\n                \"@string\"\n            ],\n            // characters\n            [\n                /'[^\\\\']'/,\n                \"string\"\n            ],\n            [\n                /(')(@escapes)(')/,\n                [\n                    \"string\",\n                    \"string.escape\",\n                    \"string\"\n                ]\n            ],\n            [\n                /'/,\n                \"string.invalid\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /\\/\\*\\*(?!\\/)/,\n                \"comment.doc\",\n                \"@doccomment\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*\\\\$/,\n                \"comment\",\n                \"@linecomment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ],\n        comment: [\n            [\n                /[^\\/*]+/,\n                \"comment\"\n            ],\n            [\n                /\\*\\//,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment\"\n            ]\n        ],\n        //For use with continuous line comments\n        linecomment: [\n            [\n                /.*[^\\\\]$/,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[^]+/,\n                \"comment\"\n            ]\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        doccomment: [\n            [\n                /[^\\/*]+/,\n                \"comment.doc\"\n            ],\n            [\n                /\\*\\//,\n                \"comment.doc\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment.doc\"\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"/,\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        raw: [\n            [\n                /[^)]+/,\n                \"string.raw\"\n            ],\n            [\n                /\\)$S2\\\"/,\n                {\n                    token: \"string.raw.end\",\n                    next: \"@pop\"\n                }\n            ],\n            [\n                /\\)/,\n                \"string.raw\"\n            ]\n        ],\n        annotation: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /using|alignas/,\n                \"keyword\"\n            ],\n            [\n                /[a-zA-Z0-9_]+/,\n                \"annotation\"\n            ],\n            [\n                /[,:]/,\n                \"delimiter\"\n            ],\n            [\n                /[()]/,\n                \"@brackets\"\n            ],\n            [\n                /\\]\\s*\\]/,\n                {\n                    token: \"annotation\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        include: [\n            [\n                /(\\s*)(<)([^<>]*)(>)/,\n                [\n                    \"\",\n                    \"keyword.directive.include.begin\",\n                    \"string.include.identifier\",\n                    {\n                        token: \"keyword.directive.include.end\",\n                        next: \"@pop\"\n                    }\n                ]\n            ],\n            [\n                /(\\s*)(\")([^\"]*)(\")/,\n                [\n                    \"\",\n                    \"keyword.directive.include.begin\",\n                    \"string.include.identifier\",\n                    {\n                        token: \"keyword.directive.include.end\",\n                        next: \"@pop\"\n                    }\n                ]\n            ]\n        ]\n    }\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=cpp.9cf8350e.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/cpp/cpp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cpp\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\n  ],\n  keywords: [\n    \"abstract\",\n    \"amp\",\n    \"array\",\n    \"auto\",\n    \"bool\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"class\",\n    \"const\",\n    \"constexpr\",\n    \"const_cast\",\n    \"continue\",\n    \"cpu\",\n    \"decltype\",\n    \"default\",\n    \"delegate\",\n    \"delete\",\n    \"do\",\n    \"double\",\n    \"dynamic_cast\",\n    \"each\",\n    \"else\",\n    \"enum\",\n    \"event\",\n    \"explicit\",\n    \"export\",\n    \"extern\",\n    \"false\",\n    \"final\",\n    \"finally\",\n    \"float\",\n    \"for\",\n    \"friend\",\n    \"gcnew\",\n    \"generic\",\n    \"goto\",\n    \"if\",\n    \"in\",\n    \"initonly\",\n    \"inline\",\n    \"int\",\n    \"interface\",\n    \"interior_ptr\",\n    \"internal\",\n    \"literal\",\n    \"long\",\n    \"mutable\",\n    \"namespace\",\n    \"new\",\n    \"noexcept\",\n    \"nullptr\",\n    \"__nullptr\",\n    \"operator\",\n    \"override\",\n    \"partial\",\n    \"pascal\",\n    \"pin_ptr\",\n    \"private\",\n    \"property\",\n    \"protected\",\n    \"public\",\n    \"ref\",\n    \"register\",\n    \"reinterpret_cast\",\n    \"restrict\",\n    \"return\",\n    \"safe_cast\",\n    \"sealed\",\n    \"short\",\n    \"signed\",\n    \"sizeof\",\n    \"static\",\n    \"static_assert\",\n    \"static_cast\",\n    \"struct\",\n    \"switch\",\n    \"template\",\n    \"this\",\n    \"thread_local\",\n    \"throw\",\n    \"tile_static\",\n    \"true\",\n    \"try\",\n    \"typedef\",\n    \"typeid\",\n    \"typename\",\n    \"union\",\n    \"unsigned\",\n    \"using\",\n    \"virtual\",\n    \"void\",\n    \"volatile\",\n    \"wchar_t\",\n    \"where\",\n    \"while\",\n    \"_asm\",\n    // reserved word with one underscores\n    \"_based\",\n    \"_cdecl\",\n    \"_declspec\",\n    \"_fastcall\",\n    \"_if_exists\",\n    \"_if_not_exists\",\n    \"_inline\",\n    \"_multiple_inheritance\",\n    \"_pascal\",\n    \"_single_inheritance\",\n    \"_stdcall\",\n    \"_virtual_inheritance\",\n    \"_w64\",\n    \"__abstract\",\n    // reserved word with two underscores\n    \"__alignof\",\n    \"__asm\",\n    \"__assume\",\n    \"__based\",\n    \"__box\",\n    \"__builtin_alignof\",\n    \"__cdecl\",\n    \"__clrcall\",\n    \"__declspec\",\n    \"__delegate\",\n    \"__event\",\n    \"__except\",\n    \"__fastcall\",\n    \"__finally\",\n    \"__forceinline\",\n    \"__gc\",\n    \"__hook\",\n    \"__identifier\",\n    \"__if_exists\",\n    \"__if_not_exists\",\n    \"__inline\",\n    \"__int128\",\n    \"__int16\",\n    \"__int32\",\n    \"__int64\",\n    \"__int8\",\n    \"__interface\",\n    \"__leave\",\n    \"__m128\",\n    \"__m128d\",\n    \"__m128i\",\n    \"__m256\",\n    \"__m256d\",\n    \"__m256i\",\n    \"__m512\",\n    \"__m512d\",\n    \"__m512i\",\n    \"__m64\",\n    \"__multiple_inheritance\",\n    \"__newslot\",\n    \"__nogc\",\n    \"__noop\",\n    \"__nounwind\",\n    \"__novtordisp\",\n    \"__pascal\",\n    \"__pin\",\n    \"__pragma\",\n    \"__property\",\n    \"__ptr32\",\n    \"__ptr64\",\n    \"__raise\",\n    \"__restrict\",\n    \"__resume\",\n    \"__sealed\",\n    \"__single_inheritance\",\n    \"__stdcall\",\n    \"__super\",\n    \"__thiscall\",\n    \"__try\",\n    \"__try_cast\",\n    \"__typeof\",\n    \"__unaligned\",\n    \"__unhook\",\n    \"__uuidof\",\n    \"__value\",\n    \"__virtual_inheritance\",\n    \"__w64\",\n    \"__wchar_t\"\n  ],\n  operators: [\n    \"=\",\n    \">\",\n    \"<\",\n    \"!\",\n    \"~\",\n    \"?\",\n    \":\",\n    \"==\",\n    \"<=\",\n    \">=\",\n    \"!=\",\n    \"&&\",\n    \"||\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"%\",\n    \"<<\",\n    \">>\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n  floatsuffix: /[fFlL]?/,\n  encoding: /u|u8|U|L/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // C++ 11 Raw String\n      [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: \"string.raw.begin\", next: \"@raw.$1\" }],\n      // identifiers and keywords\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // The preprocessor checks must be before whitespace as they check /^\\s*#/ which\n      // otherwise fails to match later after other whitespace has been removed.\n      // Inclusion\n      [/^\\s*#\\s*include/, { token: \"keyword.directive.include\", next: \"@include\" }],\n      // Preprocessor directive\n      [/^\\s*#\\s*\\w+/, \"keyword.directive\"],\n      // whitespace\n      { include: \"@whitespace\" },\n      // [[ attributes ]].\n      [/\\[\\s*\\[/, { token: \"annotation\", next: \"@annotation\" }],\n      // delimiters and operators\n      [/[{}()<>\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"],\n      [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"],\n      [/\\d[\\d']*\\d(@integersuffix)/, \"number\"],\n      [/\\d(@integersuffix)/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, \"string\", \"@string\"],\n      // characters\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    //For use with continuous line comments\n    linecomment: [\n      [/.*[^\\\\]$/, \"comment\", \"@pop\"],\n      [/[^]+/, \"comment\"]\n    ],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    raw: [\n      [/[^)]+/, \"string.raw\"],\n      [/\\)$S2\\\"/, { token: \"string.raw.end\", next: \"@pop\" }],\n      [/\\)/, \"string.raw\"]\n    ],\n    annotation: [\n      { include: \"@whitespace\" },\n      [/using|alignas/, \"keyword\"],\n      [/[a-zA-Z0-9_]+/, \"annotation\"],\n      [/[,:]/, \"delimiter\"],\n      [/[()]/, \"@brackets\"],\n      [/\\]\\s*\\]/, { token: \"annotation\", next: \"@pop\" }]\n    ],\n    include: [\n      [\n        /(\\s*)(<)([^<>]*)(>)/,\n        [\n          \"\",\n          \"keyword.directive.include.begin\",\n          \"string.include.identifier\",\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\n        ]\n      ],\n      [\n        /(\\s*)(\")([^\"]*)(\")/,\n        [\n          \"\",\n          \"keyword.directive.include.begin\",\n          \"string.include.identifier\",\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\n        ]\n      ]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","conf","language","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","encoding","tokenizer","root","next","cases","include","whitespace","comment","linecomment","doccomment","string","raw","annotation","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"cpp.9cf8350e.js.map"}