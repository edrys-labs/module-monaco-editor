{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECAA;;;;;+EAK+E,E,I,E,E,kD,E,iB,C,GAggB/E,EAAA,MAAA,CAAA,EAAA,OAAA,IACE,GADF,EAAA,MAAA,CAAA,EAAA,WAAA,IAEE,GA9fF,IAAI,EAAO,CACT,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,AACH,EACI,EAAW,CACb,aAAc,SACd,SAAU,CACR,QACA,QACA,KACA,MACA,MACA,SACA,QACA,WACA,WACA,QACA,QACA,MACA,QACA,SACA,QACA,KACA,SACA,SACA,aACA,QACA,SACA,SACA,MACA,OACA,SACA,QACA,UACA,UACA,YACA,WACA,OACA,KACA,MACA,QACA,MACD,CACD,MAAO,CACL,WACA,iBACA,gBACA,YACA,OACA,SACA,SACA,cACA,UACA,mBACA,SACA,SACA,aACA,UACA,SACA,eACA,mBACA,gBACA,OACA,mBACA,oBACA,OACA,MACA,YACA,WACA,QACA,sBACA,OACA,gBACA,MACA,QACA,aACA,eACA,oBACA,MACA,SACA,OACA,qBACA,YACA,eACA,eACA,gBACA,kBACA,gBACA,SACA,mBACA,WACA,YACA,qBACA,SACA,cACA,OACA,OACA,cACA,QACA,QACA,OACA,YACA,UACA,OACA,UACA,SACA,SACA,SACA,QACA,mBACA,gBACA,oBACA,kBACA,gBACA,eACA,gBACA,eACA,QACA,kBACA,WACA,gBACA,YACA,qBACA,WACA,iBACA,gBACA,MACA,cACA,SACA,iBACA,aACA,oBACA,WACA,mBACA,SACA,iBACA,gBACA,MACA,cACA,gBACA,UACA,QACA,iBACA,WACA,SACA,WACA,YACA,SACA,YACA,OACA,cACA,oBACA,iBACA,mBACA,QACA,UACA,SACA,UACA,OACA,OACA,YACA,QACA,YACA,MACA,QACA,UACA,aACA,aACA,aACA,qBACA,YACA,aACA,SACA,UACA,WACA,UACA,SACA,QACA,aACA,SACA,aACA,UACA,QACA,WACA,WACA,WACA,aACA,cACA,gBACA,cACA,OACA,oBACA,OACA,cACA,cACA,WACA,OACA,iBACA,YACA,qBACA,OACA,UACA,UACA,UACA,WACA,YACA,OACA,KACA,WACA,YACA,WACA,SACA,iBACA,cACA,aACA,eACA,YACA,MACA,SACA,QACA,QACA,QACA,OACA,UA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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/julia/julia.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"iwFf8\":[function(require,module,exports,__globalThis) {\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/julia/julia.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"conf\", ()=>conf);\nparcelHelpers.export(exports, \"language\", ()=>language);\nvar conf = {\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ]\n};\nvar language = {\n    tokenPostfix: \".julia\",\n    keywords: [\n        \"begin\",\n        \"while\",\n        \"if\",\n        \"for\",\n        \"try\",\n        \"return\",\n        \"break\",\n        \"continue\",\n        \"function\",\n        \"macro\",\n        \"quote\",\n        \"let\",\n        \"local\",\n        \"global\",\n        \"const\",\n        \"do\",\n        \"struct\",\n        \"module\",\n        \"baremodule\",\n        \"using\",\n        \"import\",\n        \"export\",\n        \"end\",\n        \"else\",\n        \"elseif\",\n        \"catch\",\n        \"finally\",\n        \"mutable\",\n        \"primitive\",\n        \"abstract\",\n        \"type\",\n        \"in\",\n        \"isa\",\n        \"where\",\n        \"new\"\n    ],\n    types: [\n        \"LinRange\",\n        \"LineNumberNode\",\n        \"LinearIndices\",\n        \"LoadError\",\n        \"MIME\",\n        \"Matrix\",\n        \"Method\",\n        \"MethodError\",\n        \"Missing\",\n        \"MissingException\",\n        \"Module\",\n        \"NTuple\",\n        \"NamedTuple\",\n        \"Nothing\",\n        \"Number\",\n        \"OrdinalRange\",\n        \"OutOfMemoryError\",\n        \"OverflowError\",\n        \"Pair\",\n        \"PartialQuickSort\",\n        \"PermutedDimsArray\",\n        \"Pipe\",\n        \"Ptr\",\n        \"QuoteNode\",\n        \"Rational\",\n        \"RawFD\",\n        \"ReadOnlyMemoryError\",\n        \"Real\",\n        \"ReentrantLock\",\n        \"Ref\",\n        \"Regex\",\n        \"RegexMatch\",\n        \"RoundingMode\",\n        \"SegmentationFault\",\n        \"Set\",\n        \"Signed\",\n        \"Some\",\n        \"StackOverflowError\",\n        \"StepRange\",\n        \"StepRangeLen\",\n        \"StridedArray\",\n        \"StridedMatrix\",\n        \"StridedVecOrMat\",\n        \"StridedVector\",\n        \"String\",\n        \"StringIndexError\",\n        \"SubArray\",\n        \"SubString\",\n        \"SubstitutionString\",\n        \"Symbol\",\n        \"SystemError\",\n        \"Task\",\n        \"Text\",\n        \"TextDisplay\",\n        \"Timer\",\n        \"Tuple\",\n        \"Type\",\n        \"TypeError\",\n        \"TypeVar\",\n        \"UInt\",\n        \"UInt128\",\n        \"UInt16\",\n        \"UInt32\",\n        \"UInt64\",\n        \"UInt8\",\n        \"UndefInitializer\",\n        \"AbstractArray\",\n        \"UndefKeywordError\",\n        \"AbstractChannel\",\n        \"UndefRefError\",\n        \"AbstractChar\",\n        \"UndefVarError\",\n        \"AbstractDict\",\n        \"Union\",\n        \"AbstractDisplay\",\n        \"UnionAll\",\n        \"AbstractFloat\",\n        \"UnitRange\",\n        \"AbstractIrrational\",\n        \"Unsigned\",\n        \"AbstractMatrix\",\n        \"AbstractRange\",\n        \"Val\",\n        \"AbstractSet\",\n        \"Vararg\",\n        \"AbstractString\",\n        \"VecElement\",\n        \"AbstractUnitRange\",\n        \"VecOrMat\",\n        \"AbstractVecOrMat\",\n        \"Vector\",\n        \"AbstractVector\",\n        \"VersionNumber\",\n        \"Any\",\n        \"WeakKeyDict\",\n        \"ArgumentError\",\n        \"WeakRef\",\n        \"Array\",\n        \"AssertionError\",\n        \"BigFloat\",\n        \"BigInt\",\n        \"BitArray\",\n        \"BitMatrix\",\n        \"BitSet\",\n        \"BitVector\",\n        \"Bool\",\n        \"BoundsError\",\n        \"CapturedException\",\n        \"CartesianIndex\",\n        \"CartesianIndices\",\n        \"Cchar\",\n        \"Cdouble\",\n        \"Cfloat\",\n        \"Channel\",\n        \"Char\",\n        \"Cint\",\n        \"Cintmax_t\",\n        \"Clong\",\n        \"Clonglong\",\n        \"Cmd\",\n        \"Colon\",\n        \"Complex\",\n        \"ComplexF16\",\n        \"ComplexF32\",\n        \"ComplexF64\",\n        \"CompositeException\",\n        \"Condition\",\n        \"Cptrdiff_t\",\n        \"Cshort\",\n        \"Csize_t\",\n        \"Cssize_t\",\n        \"Cstring\",\n        \"Cuchar\",\n        \"Cuint\",\n        \"Cuintmax_t\",\n        \"Culong\",\n        \"Culonglong\",\n        \"Cushort\",\n        \"Cvoid\",\n        \"Cwchar_t\",\n        \"Cwstring\",\n        \"DataType\",\n        \"DenseArray\",\n        \"DenseMatrix\",\n        \"DenseVecOrMat\",\n        \"DenseVector\",\n        \"Dict\",\n        \"DimensionMismatch\",\n        \"Dims\",\n        \"DivideError\",\n        \"DomainError\",\n        \"EOFError\",\n        \"Enum\",\n        \"ErrorException\",\n        \"Exception\",\n        \"ExponentialBackOff\",\n        \"Expr\",\n        \"Float16\",\n        \"Float32\",\n        \"Float64\",\n        \"Function\",\n        \"GlobalRef\",\n        \"HTML\",\n        \"IO\",\n        \"IOBuffer\",\n        \"IOContext\",\n        \"IOStream\",\n        \"IdDict\",\n        \"IndexCartesian\",\n        \"IndexLinear\",\n        \"IndexStyle\",\n        \"InexactError\",\n        \"InitError\",\n        \"Int\",\n        \"Int128\",\n        \"Int16\",\n        \"Int32\",\n        \"Int64\",\n        \"Int8\",\n        \"Integer\",\n        \"InterruptException\",\n        \"InvalidStateException\",\n        \"Irrational\",\n        \"KeyError\"\n    ],\n    keywordops: [\n        \"<:\",\n        \">:\",\n        \":\",\n        \"=>\",\n        \"...\",\n        \".\",\n        \"->\",\n        \"?\"\n    ],\n    allops: /[^\\w\\d\\s()\\[\\]{}\"'#]+/,\n    constants: [\n        \"true\",\n        \"false\",\n        \"nothing\",\n        \"missing\",\n        \"undef\",\n        \"Inf\",\n        \"pi\",\n        \"NaN\",\n        \"\\u03C0\",\n        \"\\u212F\",\n        \"ans\",\n        \"PROGRAM_FILE\",\n        \"ARGS\",\n        \"C_NULL\",\n        \"VERSION\",\n        \"DEPOT_PATH\",\n        \"LOAD_PATH\"\n    ],\n    operators: [\n        \"!\",\n        \"!=\",\n        \"!==\",\n        \"%\",\n        \"&\",\n        \"*\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"//\",\n        \"<\",\n        \"<<\",\n        \"<=\",\n        \"==\",\n        \"===\",\n        \"=>\",\n        \">\",\n        \">=\",\n        \">>\",\n        \">>>\",\n        \"\\\\\",\n        \"^\",\n        \"|\",\n        \"|>\",\n        \"~\",\n        \"\\xF7\",\n        \"\\u2208\",\n        \"\\u2209\",\n        \"\\u220B\",\n        \"\\u220C\",\n        \"\\u2218\",\n        \"\\u221A\",\n        \"\\u221B\",\n        \"\\u2229\",\n        \"\\u222A\",\n        \"\\u2248\",\n        \"\\u2249\",\n        \"\\u2260\",\n        \"\\u2261\",\n        \"\\u2262\",\n        \"\\u2264\",\n        \"\\u2265\",\n        \"\\u2286\",\n        \"\\u2287\",\n        \"\\u2288\",\n        \"\\u2289\",\n        \"\\u228A\",\n        \"\\u228B\",\n        \"\\u22BB\"\n    ],\n    brackets: [\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        }\n    ],\n    ident: /π|ℯ|\\b(?!\\d)\\w+\\b/,\n    // escape sequences\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [\n                /(::)\\s*|\\b(isa)\\s+/,\n                \"keyword\",\n                \"@typeanno\"\n            ],\n            [\n                /\\b(isa)(\\s*\\(@ident\\s*,\\s*)/,\n                [\n                    \"keyword\",\n                    {\n                        token: \"\",\n                        next: \"@typeanno\"\n                    }\n                ]\n            ],\n            [\n                /\\b(type|struct)[ \\t]+/,\n                \"keyword\",\n                \"@typeanno\"\n            ],\n            // symbols\n            [\n                /^\\s*:@ident[!?]?/,\n                \"metatag\"\n            ],\n            [\n                /(return)(\\s*:@ident[!?]?)/,\n                [\n                    \"keyword\",\n                    \"metatag\"\n                ]\n            ],\n            [\n                /(\\(|\\[|\\{|@allops)(\\s*:@ident[!?]?)/,\n                [\n                    \"\",\n                    \"metatag\"\n                ]\n            ],\n            [\n                /:\\(/,\n                \"metatag\",\n                \"@quote\"\n            ],\n            // regular expressions\n            [\n                /r\"\"\"/,\n                \"regexp.delim\",\n                \"@tregexp\"\n            ],\n            [\n                /r\"/,\n                \"regexp.delim\",\n                \"@sregexp\"\n            ],\n            // strings\n            [\n                /raw\"\"\"/,\n                \"string.delim\",\n                \"@rtstring\"\n            ],\n            [\n                /[bv]?\"\"\"/,\n                \"string.delim\",\n                \"@dtstring\"\n            ],\n            [\n                /raw\"/,\n                \"string.delim\",\n                \"@rsstring\"\n            ],\n            [\n                /[bv]?\"/,\n                \"string.delim\",\n                \"@dsstring\"\n            ],\n            [\n                /(@ident)\\{/,\n                {\n                    cases: {\n                        \"$1@types\": {\n                            token: \"type\",\n                            next: \"@gen\"\n                        },\n                        \"@default\": {\n                            token: \"type\",\n                            next: \"@gen\"\n                        }\n                    }\n                }\n            ],\n            [\n                /@ident[!?'']?(?=\\.?\\()/,\n                {\n                    cases: {\n                        \"@types\": \"type\",\n                        \"@keywords\": \"keyword\",\n                        \"@constants\": \"variable\",\n                        \"@default\": \"keyword.flow\"\n                    }\n                }\n            ],\n            [\n                /@ident[!?']?/,\n                {\n                    cases: {\n                        \"@types\": \"type\",\n                        \"@keywords\": \"keyword\",\n                        \"@constants\": \"variable\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            [\n                /\\$\\w+/,\n                \"key\"\n            ],\n            [\n                /\\$\\(/,\n                \"key\",\n                \"@paste\"\n            ],\n            [\n                /@@@ident/,\n                \"annotation\"\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // characters\n            [\n                /'(?:@escapes|.)'/,\n                \"string.character\"\n            ],\n            // delimiters and operators\n            [\n                /[()\\[\\]{}]/,\n                \"@brackets\"\n            ],\n            [\n                /@allops/,\n                {\n                    cases: {\n                        \"@keywordops\": \"keyword\",\n                        \"@operators\": \"operator\"\n                    }\n                }\n            ],\n            [\n                /[;,]/,\n                \"delimiter\"\n            ],\n            // numbers\n            [\n                /0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/,\n                \"number.hex\"\n            ],\n            [\n                /0[_oO][0-7](_?[0-7])*/,\n                \"number.octal\"\n            ],\n            [\n                /0[bB][01](_?[01])*/,\n                \"number.binary\"\n            ],\n            [\n                /[+\\-]?\\d+(\\.\\d+)?(im?|[eE][+\\-]?\\d+(\\.\\d+)?)?/,\n                \"number\"\n            ]\n        ],\n        // type\n        typeanno: [\n            [\n                /[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/,\n                \"type\",\n                \"@gen\"\n            ],\n            [\n                /([a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*)(\\s*<:\\s*)/,\n                [\n                    \"type\",\n                    \"keyword\"\n                ]\n            ],\n            [\n                /[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/,\n                \"type\",\n                \"@pop\"\n            ],\n            [\n                \"\",\n                \"\",\n                \"@pop\"\n            ]\n        ],\n        // generic type\n        gen: [\n            [\n                /[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/,\n                \"type\",\n                \"@push\"\n            ],\n            [\n                /[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/,\n                \"type\"\n            ],\n            [\n                /<:/,\n                \"keyword\"\n            ],\n            [\n                /(\\})(\\s*<:\\s*)/,\n                [\n                    \"type\",\n                    {\n                        token: \"keyword\",\n                        next: \"@pop\"\n                    }\n                ]\n            ],\n            [\n                /\\}/,\n                \"type\",\n                \"@pop\"\n            ],\n            {\n                include: \"@root\"\n            }\n        ],\n        // $(...)\n        quote: [\n            [\n                /\\$\\(/,\n                \"key\",\n                \"@paste\"\n            ],\n            [\n                /\\(/,\n                \"@brackets\",\n                \"@paren\"\n            ],\n            [\n                /\\)/,\n                \"metatag\",\n                \"@pop\"\n            ],\n            {\n                include: \"@root\"\n            }\n        ],\n        // :(...)\n        paste: [\n            [\n                /:\\(/,\n                \"metatag\",\n                \"@quote\"\n            ],\n            [\n                /\\(/,\n                \"@brackets\",\n                \"@paren\"\n            ],\n            [\n                /\\)/,\n                \"key\",\n                \"@pop\"\n            ],\n            {\n                include: \"@root\"\n            }\n        ],\n        // (...)\n        paren: [\n            [\n                /\\$\\(/,\n                \"key\",\n                \"@paste\"\n            ],\n            [\n                /:\\(/,\n                \"metatag\",\n                \"@quote\"\n            ],\n            [\n                /\\(/,\n                \"@brackets\",\n                \"@push\"\n            ],\n            [\n                /\\)/,\n                \"@brackets\",\n                \"@pop\"\n            ],\n            {\n                include: \"@root\"\n            }\n        ],\n        // r\"egex string\"\n        sregexp: [\n            [\n                /^.*/,\n                \"invalid\"\n            ],\n            [\n                /[^\\\\\"()\\[\\]{}]/,\n                \"regexp\"\n            ],\n            [\n                /[()\\[\\]{}]/,\n                \"@brackets\"\n            ],\n            [\n                /\\\\./,\n                \"operator.scss\"\n            ],\n            [\n                /\"[imsx]*/,\n                \"regexp.delim\",\n                \"@pop\"\n            ]\n        ],\n        tregexp: [\n            [\n                /[^\\\\\"()\\[\\]{}]/,\n                \"regexp\"\n            ],\n            [\n                /[()\\[\\]{}]/,\n                \"@brackets\"\n            ],\n            [\n                /\\\\./,\n                \"operator.scss\"\n            ],\n            [\n                /\"(?!\"\")/,\n                \"string\"\n            ],\n            [\n                /\"\"\"[imsx]*/,\n                \"regexp.delim\",\n                \"@pop\"\n            ]\n        ],\n        // raw\"string\"\n        rsstring: [\n            [\n                /^.*/,\n                \"invalid\"\n            ],\n            [\n                /[^\\\\\"]/,\n                \"string\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape\"\n            ],\n            [\n                /\"/,\n                \"string.delim\",\n                \"@pop\"\n            ]\n        ],\n        rtstring: [\n            [\n                /[^\\\\\"]/,\n                \"string\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape\"\n            ],\n            [\n                /\"(?!\"\")/,\n                \"string\"\n            ],\n            [\n                /\"\"\"/,\n                \"string.delim\",\n                \"@pop\"\n            ]\n        ],\n        // \"string\".\n        dsstring: [\n            [\n                /^.*/,\n                \"invalid\"\n            ],\n            [\n                /[^\\\\\"\\$]/,\n                \"string\"\n            ],\n            [\n                /\\$/,\n                \"\",\n                \"@interpolated\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"/,\n                \"string.delim\",\n                \"@pop\"\n            ]\n        ],\n        dtstring: [\n            [\n                /[^\\\\\"\\$]/,\n                \"string\"\n            ],\n            [\n                /\\$/,\n                \"\",\n                \"@interpolated\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"(?!\"\")/,\n                \"string\"\n            ],\n            [\n                /\"\"\"/,\n                \"string.delim\",\n                \"@pop\"\n            ]\n        ],\n        // interpolated sequence\n        interpolated: [\n            [\n                /\\(/,\n                {\n                    token: \"\",\n                    switchTo: \"@interpolated_compound\"\n                }\n            ],\n            [\n                /[a-zA-Z_]\\w*/,\n                \"identifier\"\n            ],\n            [\n                \"\",\n                \"\",\n                \"@pop\"\n            ]\n        ],\n        // any code\n        interpolated_compound: [\n            [\n                /\\)/,\n                \"\",\n                \"@pop\"\n            ],\n            {\n                include: \"@root\"\n            }\n        ],\n        // whitespace & comments\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /#=/,\n                \"comment\",\n                \"@multi_comment\"\n            ],\n            [\n                /#.*$/,\n                \"comment\"\n            ]\n        ],\n        multi_comment: [\n            [\n                /#=/,\n                \"comment\",\n                \"@push\"\n            ],\n            [\n                /=#/,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /=(?!#)|#(?!=)/,\n                \"comment\"\n            ],\n            [\n                /[^#=]+/,\n                \"comment\"\n            ]\n        ]\n    }\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=julia.7b01fe51.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/julia/julia.ts\nvar conf = {\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ]\n};\nvar language = {\n  tokenPostfix: \".julia\",\n  keywords: [\n    \"begin\",\n    \"while\",\n    \"if\",\n    \"for\",\n    \"try\",\n    \"return\",\n    \"break\",\n    \"continue\",\n    \"function\",\n    \"macro\",\n    \"quote\",\n    \"let\",\n    \"local\",\n    \"global\",\n    \"const\",\n    \"do\",\n    \"struct\",\n    \"module\",\n    \"baremodule\",\n    \"using\",\n    \"import\",\n    \"export\",\n    \"end\",\n    \"else\",\n    \"elseif\",\n    \"catch\",\n    \"finally\",\n    \"mutable\",\n    \"primitive\",\n    \"abstract\",\n    \"type\",\n    \"in\",\n    \"isa\",\n    \"where\",\n    \"new\"\n  ],\n  types: [\n    \"LinRange\",\n    \"LineNumberNode\",\n    \"LinearIndices\",\n    \"LoadError\",\n    \"MIME\",\n    \"Matrix\",\n    \"Method\",\n    \"MethodError\",\n    \"Missing\",\n    \"MissingException\",\n    \"Module\",\n    \"NTuple\",\n    \"NamedTuple\",\n    \"Nothing\",\n    \"Number\",\n    \"OrdinalRange\",\n    \"OutOfMemoryError\",\n    \"OverflowError\",\n    \"Pair\",\n    \"PartialQuickSort\",\n    \"PermutedDimsArray\",\n    \"Pipe\",\n    \"Ptr\",\n    \"QuoteNode\",\n    \"Rational\",\n    \"RawFD\",\n    \"ReadOnlyMemoryError\",\n    \"Real\",\n    \"ReentrantLock\",\n    \"Ref\",\n    \"Regex\",\n    \"RegexMatch\",\n    \"RoundingMode\",\n    \"SegmentationFault\",\n    \"Set\",\n    \"Signed\",\n    \"Some\",\n    \"StackOverflowError\",\n    \"StepRange\",\n    \"StepRangeLen\",\n    \"StridedArray\",\n    \"StridedMatrix\",\n    \"StridedVecOrMat\",\n    \"StridedVector\",\n    \"String\",\n    \"StringIndexError\",\n    \"SubArray\",\n    \"SubString\",\n    \"SubstitutionString\",\n    \"Symbol\",\n    \"SystemError\",\n    \"Task\",\n    \"Text\",\n    \"TextDisplay\",\n    \"Timer\",\n    \"Tuple\",\n    \"Type\",\n    \"TypeError\",\n    \"TypeVar\",\n    \"UInt\",\n    \"UInt128\",\n    \"UInt16\",\n    \"UInt32\",\n    \"UInt64\",\n    \"UInt8\",\n    \"UndefInitializer\",\n    \"AbstractArray\",\n    \"UndefKeywordError\",\n    \"AbstractChannel\",\n    \"UndefRefError\",\n    \"AbstractChar\",\n    \"UndefVarError\",\n    \"AbstractDict\",\n    \"Union\",\n    \"AbstractDisplay\",\n    \"UnionAll\",\n    \"AbstractFloat\",\n    \"UnitRange\",\n    \"AbstractIrrational\",\n    \"Unsigned\",\n    \"AbstractMatrix\",\n    \"AbstractRange\",\n    \"Val\",\n    \"AbstractSet\",\n    \"Vararg\",\n    \"AbstractString\",\n    \"VecElement\",\n    \"AbstractUnitRange\",\n    \"VecOrMat\",\n    \"AbstractVecOrMat\",\n    \"Vector\",\n    \"AbstractVector\",\n    \"VersionNumber\",\n    \"Any\",\n    \"WeakKeyDict\",\n    \"ArgumentError\",\n    \"WeakRef\",\n    \"Array\",\n    \"AssertionError\",\n    \"BigFloat\",\n    \"BigInt\",\n    \"BitArray\",\n    \"BitMatrix\",\n    \"BitSet\",\n    \"BitVector\",\n    \"Bool\",\n    \"BoundsError\",\n    \"CapturedException\",\n    \"CartesianIndex\",\n    \"CartesianIndices\",\n    \"Cchar\",\n    \"Cdouble\",\n    \"Cfloat\",\n    \"Channel\",\n    \"Char\",\n    \"Cint\",\n    \"Cintmax_t\",\n    \"Clong\",\n    \"Clonglong\",\n    \"Cmd\",\n    \"Colon\",\n    \"Complex\",\n    \"ComplexF16\",\n    \"ComplexF32\",\n    \"ComplexF64\",\n    \"CompositeException\",\n    \"Condition\",\n    \"Cptrdiff_t\",\n    \"Cshort\",\n    \"Csize_t\",\n    \"Cssize_t\",\n    \"Cstring\",\n    \"Cuchar\",\n    \"Cuint\",\n    \"Cuintmax_t\",\n    \"Culong\",\n    \"Culonglong\",\n    \"Cushort\",\n    \"Cvoid\",\n    \"Cwchar_t\",\n    \"Cwstring\",\n    \"DataType\",\n    \"DenseArray\",\n    \"DenseMatrix\",\n    \"DenseVecOrMat\",\n    \"DenseVector\",\n    \"Dict\",\n    \"DimensionMismatch\",\n    \"Dims\",\n    \"DivideError\",\n    \"DomainError\",\n    \"EOFError\",\n    \"Enum\",\n    \"ErrorException\",\n    \"Exception\",\n    \"ExponentialBackOff\",\n    \"Expr\",\n    \"Float16\",\n    \"Float32\",\n    \"Float64\",\n    \"Function\",\n    \"GlobalRef\",\n    \"HTML\",\n    \"IO\",\n    \"IOBuffer\",\n    \"IOContext\",\n    \"IOStream\",\n    \"IdDict\",\n    \"IndexCartesian\",\n    \"IndexLinear\",\n    \"IndexStyle\",\n    \"InexactError\",\n    \"InitError\",\n    \"Int\",\n    \"Int128\",\n    \"Int16\",\n    \"Int32\",\n    \"Int64\",\n    \"Int8\",\n    \"Integer\",\n    \"InterruptException\",\n    \"InvalidStateException\",\n    \"Irrational\",\n    \"KeyError\"\n  ],\n  keywordops: [\"<:\", \">:\", \":\", \"=>\", \"...\", \".\", \"->\", \"?\"],\n  allops: /[^\\w\\d\\s()\\[\\]{}\"'#]+/,\n  constants: [\n    \"true\",\n    \"false\",\n    \"nothing\",\n    \"missing\",\n    \"undef\",\n    \"Inf\",\n    \"pi\",\n    \"NaN\",\n    \"\\u03C0\",\n    \"\\u212F\",\n    \"ans\",\n    \"PROGRAM_FILE\",\n    \"ARGS\",\n    \"C_NULL\",\n    \"VERSION\",\n    \"DEPOT_PATH\",\n    \"LOAD_PATH\"\n  ],\n  operators: [\n    \"!\",\n    \"!=\",\n    \"!==\",\n    \"%\",\n    \"&\",\n    \"*\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"//\",\n    \"<\",\n    \"<<\",\n    \"<=\",\n    \"==\",\n    \"===\",\n    \"=>\",\n    \">\",\n    \">=\",\n    \">>\",\n    \">>>\",\n    \"\\\\\",\n    \"^\",\n    \"|\",\n    \"|>\",\n    \"~\",\n    \"\\xF7\",\n    \"\\u2208\",\n    \"\\u2209\",\n    \"\\u220B\",\n    \"\\u220C\",\n    \"\\u2218\",\n    \"\\u221A\",\n    \"\\u221B\",\n    \"\\u2229\",\n    \"\\u222A\",\n    \"\\u2248\",\n    \"\\u2249\",\n    \"\\u2260\",\n    \"\\u2261\",\n    \"\\u2262\",\n    \"\\u2264\",\n    \"\\u2265\",\n    \"\\u2286\",\n    \"\\u2287\",\n    \"\\u2288\",\n    \"\\u2289\",\n    \"\\u228A\",\n    \"\\u228B\",\n    \"\\u22BB\"\n  ],\n  brackets: [\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\n  ],\n  ident: /π|ℯ|\\b(?!\\d)\\w+\\b/,\n  // escape sequences\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      [/(::)\\s*|\\b(isa)\\s+/, \"keyword\", \"@typeanno\"],\n      [/\\b(isa)(\\s*\\(@ident\\s*,\\s*)/, [\"keyword\", { token: \"\", next: \"@typeanno\" }]],\n      [/\\b(type|struct)[ \\t]+/, \"keyword\", \"@typeanno\"],\n      // symbols\n      [/^\\s*:@ident[!?]?/, \"metatag\"],\n      [/(return)(\\s*:@ident[!?]?)/, [\"keyword\", \"metatag\"]],\n      [/(\\(|\\[|\\{|@allops)(\\s*:@ident[!?]?)/, [\"\", \"metatag\"]],\n      [/:\\(/, \"metatag\", \"@quote\"],\n      // regular expressions\n      [/r\"\"\"/, \"regexp.delim\", \"@tregexp\"],\n      [/r\"/, \"regexp.delim\", \"@sregexp\"],\n      // strings\n      [/raw\"\"\"/, \"string.delim\", \"@rtstring\"],\n      [/[bv]?\"\"\"/, \"string.delim\", \"@dtstring\"],\n      [/raw\"/, \"string.delim\", \"@rsstring\"],\n      [/[bv]?\"/, \"string.delim\", \"@dsstring\"],\n      [\n        /(@ident)\\{/,\n        {\n          cases: {\n            \"$1@types\": { token: \"type\", next: \"@gen\" },\n            \"@default\": { token: \"type\", next: \"@gen\" }\n          }\n        }\n      ],\n      [\n        /@ident[!?'']?(?=\\.?\\()/,\n        {\n          cases: {\n            \"@types\": \"type\",\n            \"@keywords\": \"keyword\",\n            \"@constants\": \"variable\",\n            \"@default\": \"keyword.flow\"\n          }\n        }\n      ],\n      [\n        /@ident[!?']?/,\n        {\n          cases: {\n            \"@types\": \"type\",\n            \"@keywords\": \"keyword\",\n            \"@constants\": \"variable\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\$\\w+/, \"key\"],\n      [/\\$\\(/, \"key\", \"@paste\"],\n      [/@@@ident/, \"annotation\"],\n      // whitespace\n      { include: \"@whitespace\" },\n      // characters\n      [/'(?:@escapes|.)'/, \"string.character\"],\n      // delimiters and operators\n      [/[()\\[\\]{}]/, \"@brackets\"],\n      [\n        /@allops/,\n        {\n          cases: {\n            \"@keywordops\": \"keyword\",\n            \"@operators\": \"operator\"\n          }\n        }\n      ],\n      [/[;,]/, \"delimiter\"],\n      // numbers\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"],\n      [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"],\n      [/0[bB][01](_?[01])*/, \"number.binary\"],\n      [/[+\\-]?\\d+(\\.\\d+)?(im?|[eE][+\\-]?\\d+(\\.\\d+)?)?/, \"number\"]\n    ],\n    // type\n    typeanno: [\n      [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, \"type\", \"@gen\"],\n      [/([a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*)(\\s*<:\\s*)/, [\"type\", \"keyword\"]],\n      [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, \"type\", \"@pop\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    // generic type\n    gen: [\n      [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, \"type\", \"@push\"],\n      [/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, \"type\"],\n      [/<:/, \"keyword\"],\n      [/(\\})(\\s*<:\\s*)/, [\"type\", { token: \"keyword\", next: \"@pop\" }]],\n      [/\\}/, \"type\", \"@pop\"],\n      { include: \"@root\" }\n    ],\n    // $(...)\n    quote: [\n      [/\\$\\(/, \"key\", \"@paste\"],\n      [/\\(/, \"@brackets\", \"@paren\"],\n      [/\\)/, \"metatag\", \"@pop\"],\n      { include: \"@root\" }\n    ],\n    // :(...)\n    paste: [\n      [/:\\(/, \"metatag\", \"@quote\"],\n      [/\\(/, \"@brackets\", \"@paren\"],\n      [/\\)/, \"key\", \"@pop\"],\n      { include: \"@root\" }\n    ],\n    // (...)\n    paren: [\n      [/\\$\\(/, \"key\", \"@paste\"],\n      [/:\\(/, \"metatag\", \"@quote\"],\n      [/\\(/, \"@brackets\", \"@push\"],\n      [/\\)/, \"@brackets\", \"@pop\"],\n      { include: \"@root\" }\n    ],\n    // r\"egex string\"\n    sregexp: [\n      [/^.*/, \"invalid\"],\n      [/[^\\\\\"()\\[\\]{}]/, \"regexp\"],\n      [/[()\\[\\]{}]/, \"@brackets\"],\n      [/\\\\./, \"operator.scss\"],\n      [/\"[imsx]*/, \"regexp.delim\", \"@pop\"]\n    ],\n    tregexp: [\n      [/[^\\\\\"()\\[\\]{}]/, \"regexp\"],\n      [/[()\\[\\]{}]/, \"@brackets\"],\n      [/\\\\./, \"operator.scss\"],\n      [/\"(?!\"\")/, \"string\"],\n      [/\"\"\"[imsx]*/, \"regexp.delim\", \"@pop\"]\n    ],\n    // raw\"string\"\n    rsstring: [\n      [/^.*/, \"invalid\"],\n      [/[^\\\\\"]/, \"string\"],\n      [/\\\\./, \"string.escape\"],\n      [/\"/, \"string.delim\", \"@pop\"]\n    ],\n    rtstring: [\n      [/[^\\\\\"]/, \"string\"],\n      [/\\\\./, \"string.escape\"],\n      [/\"(?!\"\")/, \"string\"],\n      [/\"\"\"/, \"string.delim\", \"@pop\"]\n    ],\n    // \"string\".\n    dsstring: [\n      [/^.*/, \"invalid\"],\n      [/[^\\\\\"\\$]/, \"string\"],\n      [/\\$/, \"\", \"@interpolated\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string.delim\", \"@pop\"]\n    ],\n    dtstring: [\n      [/[^\\\\\"\\$]/, \"string\"],\n      [/\\$/, \"\", \"@interpolated\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"(?!\"\")/, \"string\"],\n      [/\"\"\"/, \"string.delim\", \"@pop\"]\n    ],\n    // interpolated sequence\n    interpolated: [\n      [/\\(/, { token: \"\", switchTo: \"@interpolated_compound\" }],\n      [/[a-zA-Z_]\\w*/, \"identifier\"],\n      [\"\", \"\", \"@pop\"]\n      // just a $ is interpreted as a $\n    ],\n    // any code\n    interpolated_compound: [[/\\)/, \"\", \"@pop\"], { include: \"@root\" }],\n    // whitespace & comments\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/#=/, \"comment\", \"@multi_comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    multi_comment: [\n      [/#=/, \"comment\", \"@push\"],\n      [/=#/, \"comment\", \"@pop\"],\n      [/=(?!#)|#(?!=)/, \"comment\"],\n      [/[^#=]+/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","conf","language","brackets","autoClosingPairs","open","close","surroundingPairs","tokenPostfix","keywords","types","keywordops","allops","constants","operators","token","ident","escape","escapes","tokenizer","root","next","cases","include","typeanno","gen","quote","paste","paren","sregexp","tregexp","rsstring","rtstring","dsstring","dtstring","interpolated","switchTo","interpolated_compound","whitespace","multi_comment","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"julia.7b01fe51.js.map"}