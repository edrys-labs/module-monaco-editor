{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECAA;;;;;+EAK+E,E,I,E,E,kD,E,iB,C,GAqQ/E,EAAA,MAAA,CAAA,EAAA,OAAA,IACE,GADF,EAAA,MAAA,CAAA,EAAA,WAAA,IAEE,GAnQF,IAAI,EAAO,CACT,YAAa,kDACb,SAAU,CACR,aAAc,CAAC,KAAM,KAAK,CAC1B,YAAa,IACf,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAA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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"yqfxK\":[function(require,module,exports,__globalThis) {\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/scss/scss.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"conf\", ()=>conf);\nparcelHelpers.export(exports, \"language\", ()=>language);\nvar conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\n    comments: {\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ],\n        lineComment: \"//\"\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nvar language = {\n    defaultToken: \"\",\n    tokenPostfix: \".scss\",\n    ws: \"[ \t\\n\\r\\f]*\",\n    // whitespaces (referenced in several rules)\n    identifier: \"-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*\",\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.bracket\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"<\",\n            close: \">\",\n            token: \"delimiter.angle\"\n        }\n    ],\n    tokenizer: {\n        root: [\n            {\n                include: \"@selector\"\n            }\n        ],\n        selector: [\n            {\n                include: \"@comments\"\n            },\n            {\n                include: \"@import\"\n            },\n            {\n                include: \"@variabledeclaration\"\n            },\n            {\n                include: \"@warndebug\"\n            },\n            // sass: log statements\n            [\n                \"[@](include)\",\n                {\n                    token: \"keyword\",\n                    next: \"@includedeclaration\"\n                }\n            ],\n            // sass: include statement\n            [\n                \"[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)\",\n                {\n                    token: \"keyword\",\n                    next: \"@keyframedeclaration\"\n                }\n            ],\n            [\n                \"[@](page|content|font-face|-moz-document)\",\n                {\n                    token: \"keyword\"\n                }\n            ],\n            // sass: placeholder for includes\n            [\n                \"[@](charset|namespace)\",\n                {\n                    token: \"keyword\",\n                    next: \"@declarationbody\"\n                }\n            ],\n            [\n                \"[@](function)\",\n                {\n                    token: \"keyword\",\n                    next: \"@functiondeclaration\"\n                }\n            ],\n            [\n                \"[@](mixin)\",\n                {\n                    token: \"keyword\",\n                    next: \"@mixindeclaration\"\n                }\n            ],\n            [\n                \"url(\\\\-prefix)?\\\\(\",\n                {\n                    token: \"meta\",\n                    next: \"@urldeclaration\"\n                }\n            ],\n            {\n                include: \"@controlstatement\"\n            },\n            // sass control statements\n            {\n                include: \"@selectorname\"\n            },\n            [\n                \"[&\\\\*]\",\n                \"tag\"\n            ],\n            // selector symbols\n            [\n                \"[>\\\\+,]\",\n                \"delimiter\"\n            ],\n            // selector operators\n            [\n                \"\\\\[\",\n                {\n                    token: \"delimiter.bracket\",\n                    next: \"@selectorattribute\"\n                }\n            ],\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    next: \"@selectorbody\"\n                }\n            ]\n        ],\n        selectorbody: [\n            [\n                \"[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))\",\n                \"attribute.name\",\n                \"@rulevalue\"\n            ],\n            // rule definition: to distinguish from a nested selector check for whitespace, number or a semicolon\n            {\n                include: \"@selector\"\n            },\n            // sass: nested selectors\n            [\n                \"[@](extend)\",\n                {\n                    token: \"keyword\",\n                    next: \"@extendbody\"\n                }\n            ],\n            // sass: extend other selectors\n            [\n                \"[@](return)\",\n                {\n                    token: \"keyword\",\n                    next: \"@declarationbody\"\n                }\n            ],\n            [\n                \"}\",\n                {\n                    token: \"delimiter.curly\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        selectorname: [\n            [\n                \"#{\",\n                {\n                    token: \"meta\",\n                    next: \"@variableinterpolation\"\n                }\n            ],\n            // sass: interpolation\n            [\n                \"(\\\\.|#(?=[^{])|%|(@identifier)|:)+\",\n                \"tag\"\n            ]\n        ],\n        selectorattribute: [\n            {\n                include: \"@term\"\n            },\n            [\n                \"]\",\n                {\n                    token: \"delimiter.bracket\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        term: [\n            {\n                include: \"@comments\"\n            },\n            [\n                \"url(\\\\-prefix)?\\\\(\",\n                {\n                    token: \"meta\",\n                    next: \"@urldeclaration\"\n                }\n            ],\n            {\n                include: \"@functioninvocation\"\n            },\n            {\n                include: \"@numbers\"\n            },\n            {\n                include: \"@strings\"\n            },\n            {\n                include: \"@variablereference\"\n            },\n            [\n                \"(and\\\\b|or\\\\b|not\\\\b)\",\n                \"operator\"\n            ],\n            {\n                include: \"@name\"\n            },\n            [\n                \"([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])\",\n                \"operator\"\n            ],\n            [\n                \",\",\n                \"delimiter\"\n            ],\n            [\n                \"!default\",\n                \"literal\"\n            ],\n            [\n                \"\\\\(\",\n                {\n                    token: \"delimiter.parenthesis\",\n                    next: \"@parenthizedterm\"\n                }\n            ]\n        ],\n        rulevalue: [\n            {\n                include: \"@term\"\n            },\n            [\n                \"!important\",\n                \"literal\"\n            ],\n            [\n                \";\",\n                \"delimiter\",\n                \"@pop\"\n            ],\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    switchTo: \"@nestedproperty\"\n                }\n            ],\n            // sass: nested properties\n            [\n                \"(?=})\",\n                {\n                    token: \"\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        nestedproperty: [\n            [\n                \"[*_]?@identifier@ws:\",\n                \"attribute.name\",\n                \"@rulevalue\"\n            ],\n            {\n                include: \"@comments\"\n            },\n            [\n                \"}\",\n                {\n                    token: \"delimiter.curly\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        warndebug: [\n            [\n                \"[@](warn|debug)\",\n                {\n                    token: \"keyword\",\n                    next: \"@declarationbody\"\n                }\n            ]\n        ],\n        import: [\n            [\n                \"[@](import)\",\n                {\n                    token: \"keyword\",\n                    next: \"@declarationbody\"\n                }\n            ]\n        ],\n        variabledeclaration: [\n            // sass variables\n            [\n                \"\\\\$@identifier@ws:\",\n                \"variable.decl\",\n                \"@declarationbody\"\n            ]\n        ],\n        urldeclaration: [\n            {\n                include: \"@strings\"\n            },\n            [\n                \"[^)\\r\\n]+\",\n                \"string\"\n            ],\n            [\n                \"\\\\)\",\n                {\n                    token: \"meta\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        parenthizedterm: [\n            {\n                include: \"@term\"\n            },\n            [\n                \"\\\\)\",\n                {\n                    token: \"delimiter.parenthesis\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        declarationbody: [\n            {\n                include: \"@term\"\n            },\n            [\n                \";\",\n                \"delimiter\",\n                \"@pop\"\n            ],\n            [\n                \"(?=})\",\n                {\n                    token: \"\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        extendbody: [\n            {\n                include: \"@selectorname\"\n            },\n            [\n                \"!optional\",\n                \"literal\"\n            ],\n            [\n                \";\",\n                \"delimiter\",\n                \"@pop\"\n            ],\n            [\n                \"(?=})\",\n                {\n                    token: \"\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        variablereference: [\n            // sass variable reference\n            [\n                \"\\\\$@identifier\",\n                \"variable.ref\"\n            ],\n            [\n                \"\\\\.\\\\.\\\\.\",\n                \"operator\"\n            ],\n            // var args in reference\n            [\n                \"#{\",\n                {\n                    token: \"meta\",\n                    next: \"@variableinterpolation\"\n                }\n            ]\n        ],\n        variableinterpolation: [\n            {\n                include: \"@variablereference\"\n            },\n            [\n                \"}\",\n                {\n                    token: \"meta\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        comments: [\n            [\n                \"\\\\/\\\\*\",\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                \"\\\\/\\\\/+.*\",\n                \"comment\"\n            ]\n        ],\n        comment: [\n            [\n                \"\\\\*\\\\/\",\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                \".\",\n                \"comment\"\n            ]\n        ],\n        name: [\n            [\n                \"@identifier\",\n                \"attribute.value\"\n            ]\n        ],\n        numbers: [\n            [\n                \"(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?\",\n                {\n                    token: \"number\",\n                    next: \"@units\"\n                }\n            ],\n            [\n                \"#[0-9a-fA-F_]+(?!\\\\w)\",\n                \"number.hex\"\n            ]\n        ],\n        units: [\n            [\n                \"(em|ex|ch|rem|fr|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?\",\n                \"number\",\n                \"@pop\"\n            ]\n        ],\n        functiondeclaration: [\n            [\n                \"@identifier@ws\\\\(\",\n                {\n                    token: \"meta\",\n                    next: \"@parameterdeclaration\"\n                }\n            ],\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    switchTo: \"@functionbody\"\n                }\n            ]\n        ],\n        mixindeclaration: [\n            // mixin with parameters\n            [\n                \"@identifier@ws\\\\(\",\n                {\n                    token: \"meta\",\n                    next: \"@parameterdeclaration\"\n                }\n            ],\n            // mixin without parameters\n            [\n                \"@identifier\",\n                \"meta\"\n            ],\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    switchTo: \"@selectorbody\"\n                }\n            ]\n        ],\n        parameterdeclaration: [\n            [\n                \"\\\\$@identifier@ws:\",\n                \"variable.decl\"\n            ],\n            [\n                \"\\\\.\\\\.\\\\.\",\n                \"operator\"\n            ],\n            // var args in declaration\n            [\n                \",\",\n                \"delimiter\"\n            ],\n            {\n                include: \"@term\"\n            },\n            [\n                \"\\\\)\",\n                {\n                    token: \"meta\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        includedeclaration: [\n            {\n                include: \"@functioninvocation\"\n            },\n            [\n                \"@identifier\",\n                \"meta\"\n            ],\n            [\n                \";\",\n                \"delimiter\",\n                \"@pop\"\n            ],\n            [\n                \"(?=})\",\n                {\n                    token: \"\",\n                    next: \"@pop\"\n                }\n            ],\n            // missing semicolon\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    switchTo: \"@selectorbody\"\n                }\n            ]\n        ],\n        keyframedeclaration: [\n            [\n                \"@identifier\",\n                \"meta\"\n            ],\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    switchTo: \"@keyframebody\"\n                }\n            ]\n        ],\n        keyframebody: [\n            {\n                include: \"@term\"\n            },\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    next: \"@selectorbody\"\n                }\n            ],\n            [\n                \"}\",\n                {\n                    token: \"delimiter.curly\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        controlstatement: [\n            [\n                \"[@](if|else|for|while|each|media)\",\n                {\n                    token: \"keyword.flow\",\n                    next: \"@controlstatementdeclaration\"\n                }\n            ]\n        ],\n        controlstatementdeclaration: [\n            [\n                \"(in|from|through|if|to)\\\\b\",\n                {\n                    token: \"keyword.flow\"\n                }\n            ],\n            {\n                include: \"@term\"\n            },\n            [\n                \"{\",\n                {\n                    token: \"delimiter.curly\",\n                    switchTo: \"@selectorbody\"\n                }\n            ]\n        ],\n        functionbody: [\n            [\n                \"[@](return)\",\n                {\n                    token: \"keyword\"\n                }\n            ],\n            {\n                include: \"@variabledeclaration\"\n            },\n            {\n                include: \"@term\"\n            },\n            {\n                include: \"@controlstatement\"\n            },\n            [\n                \";\",\n                \"delimiter\"\n            ],\n            [\n                \"}\",\n                {\n                    token: \"delimiter.curly\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        functioninvocation: [\n            [\n                \"@identifier\\\\(\",\n                {\n                    token: \"meta\",\n                    next: \"@functionarguments\"\n                }\n            ]\n        ],\n        functionarguments: [\n            [\n                \"\\\\$@identifier@ws:\",\n                \"attribute.name\"\n            ],\n            [\n                \"[,]\",\n                \"delimiter\"\n            ],\n            {\n                include: \"@term\"\n            },\n            [\n                \"\\\\)\",\n                {\n                    token: \"meta\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        strings: [\n            [\n                '~?\"',\n                {\n                    token: \"string.delimiter\",\n                    next: \"@stringenddoublequote\"\n                }\n            ],\n            [\n                \"~?'\",\n                {\n                    token: \"string.delimiter\",\n                    next: \"@stringendquote\"\n                }\n            ]\n        ],\n        stringenddoublequote: [\n            [\n                \"\\\\\\\\.\",\n                \"string\"\n            ],\n            [\n                '\"',\n                {\n                    token: \"string.delimiter\",\n                    next: \"@pop\"\n                }\n            ],\n            [\n                \".\",\n                \"string\"\n            ]\n        ],\n        stringendquote: [\n            [\n                \"\\\\\\\\.\",\n                \"string\"\n            ],\n            [\n                \"'\",\n                {\n                    token: \"string.delimiter\",\n                    next: \"@pop\"\n                }\n            ],\n            [\n                \".\",\n                \"string\"\n            ]\n        ]\n    }\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=scss.b034b245.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/scss/scss.ts\nvar conf = {\n  wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\n  comments: {\n    blockComment: [\"/*\", \"*/\"],\n    lineComment: \"//\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n      end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".scss\",\n  ws: \"[ \t\\n\\r\\f]*\",\n  // whitespaces (referenced in several rules)\n  identifier: \"-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.bracket\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  tokenizer: {\n    root: [{ include: \"@selector\" }],\n    selector: [\n      { include: \"@comments\" },\n      { include: \"@import\" },\n      { include: \"@variabledeclaration\" },\n      { include: \"@warndebug\" },\n      // sass: log statements\n      [\"[@](include)\", { token: \"keyword\", next: \"@includedeclaration\" }],\n      // sass: include statement\n      [\n        \"[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)\",\n        { token: \"keyword\", next: \"@keyframedeclaration\" }\n      ],\n      [\"[@](page|content|font-face|-moz-document)\", { token: \"keyword\" }],\n      // sass: placeholder for includes\n      [\"[@](charset|namespace)\", { token: \"keyword\", next: \"@declarationbody\" }],\n      [\"[@](function)\", { token: \"keyword\", next: \"@functiondeclaration\" }],\n      [\"[@](mixin)\", { token: \"keyword\", next: \"@mixindeclaration\" }],\n      [\"url(\\\\-prefix)?\\\\(\", { token: \"meta\", next: \"@urldeclaration\" }],\n      { include: \"@controlstatement\" },\n      // sass control statements\n      { include: \"@selectorname\" },\n      [\"[&\\\\*]\", \"tag\"],\n      // selector symbols\n      [\"[>\\\\+,]\", \"delimiter\"],\n      // selector operators\n      [\"\\\\[\", { token: \"delimiter.bracket\", next: \"@selectorattribute\" }],\n      [\"{\", { token: \"delimiter.curly\", next: \"@selectorbody\" }]\n    ],\n    selectorbody: [\n      [\"[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))\", \"attribute.name\", \"@rulevalue\"],\n      // rule definition: to distinguish from a nested selector check for whitespace, number or a semicolon\n      { include: \"@selector\" },\n      // sass: nested selectors\n      [\"[@](extend)\", { token: \"keyword\", next: \"@extendbody\" }],\n      // sass: extend other selectors\n      [\"[@](return)\", { token: \"keyword\", next: \"@declarationbody\" }],\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\n    ],\n    selectorname: [\n      [\"#{\", { token: \"meta\", next: \"@variableinterpolation\" }],\n      // sass: interpolation\n      [\"(\\\\.|#(?=[^{])|%|(@identifier)|:)+\", \"tag\"]\n      // selector (.foo, div, ...)\n    ],\n    selectorattribute: [{ include: \"@term\" }, [\"]\", { token: \"delimiter.bracket\", next: \"@pop\" }]],\n    term: [\n      { include: \"@comments\" },\n      [\"url(\\\\-prefix)?\\\\(\", { token: \"meta\", next: \"@urldeclaration\" }],\n      { include: \"@functioninvocation\" },\n      { include: \"@numbers\" },\n      { include: \"@strings\" },\n      { include: \"@variablereference\" },\n      [\"(and\\\\b|or\\\\b|not\\\\b)\", \"operator\"],\n      { include: \"@name\" },\n      [\"([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])\", \"operator\"],\n      [\",\", \"delimiter\"],\n      [\"!default\", \"literal\"],\n      [\"\\\\(\", { token: \"delimiter.parenthesis\", next: \"@parenthizedterm\" }]\n    ],\n    rulevalue: [\n      { include: \"@term\" },\n      [\"!important\", \"literal\"],\n      [\";\", \"delimiter\", \"@pop\"],\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@nestedproperty\" }],\n      // sass: nested properties\n      [\"(?=})\", { token: \"\", next: \"@pop\" }]\n      // missing semicolon\n    ],\n    nestedproperty: [\n      [\"[*_]?@identifier@ws:\", \"attribute.name\", \"@rulevalue\"],\n      { include: \"@comments\" },\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\n    ],\n    warndebug: [[\"[@](warn|debug)\", { token: \"keyword\", next: \"@declarationbody\" }]],\n    import: [[\"[@](import)\", { token: \"keyword\", next: \"@declarationbody\" }]],\n    variabledeclaration: [\n      // sass variables\n      [\"\\\\$@identifier@ws:\", \"variable.decl\", \"@declarationbody\"]\n    ],\n    urldeclaration: [\n      { include: \"@strings\" },\n      [\"[^)\\r\\n]+\", \"string\"],\n      [\"\\\\)\", { token: \"meta\", next: \"@pop\" }]\n    ],\n    parenthizedterm: [\n      { include: \"@term\" },\n      [\"\\\\)\", { token: \"delimiter.parenthesis\", next: \"@pop\" }]\n    ],\n    declarationbody: [\n      { include: \"@term\" },\n      [\";\", \"delimiter\", \"@pop\"],\n      [\"(?=})\", { token: \"\", next: \"@pop\" }]\n      // missing semicolon\n    ],\n    extendbody: [\n      { include: \"@selectorname\" },\n      [\"!optional\", \"literal\"],\n      [\";\", \"delimiter\", \"@pop\"],\n      [\"(?=})\", { token: \"\", next: \"@pop\" }]\n      // missing semicolon\n    ],\n    variablereference: [\n      // sass variable reference\n      [\"\\\\$@identifier\", \"variable.ref\"],\n      [\"\\\\.\\\\.\\\\.\", \"operator\"],\n      // var args in reference\n      [\"#{\", { token: \"meta\", next: \"@variableinterpolation\" }]\n      // sass var resolve\n    ],\n    variableinterpolation: [\n      { include: \"@variablereference\" },\n      [\"}\", { token: \"meta\", next: \"@pop\" }]\n    ],\n    comments: [\n      [\"\\\\/\\\\*\", \"comment\", \"@comment\"],\n      [\"\\\\/\\\\/+.*\", \"comment\"]\n    ],\n    comment: [\n      [\"\\\\*\\\\/\", \"comment\", \"@pop\"],\n      [\".\", \"comment\"]\n    ],\n    name: [[\"@identifier\", \"attribute.value\"]],\n    numbers: [\n      [\"(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?\", { token: \"number\", next: \"@units\" }],\n      [\"#[0-9a-fA-F_]+(?!\\\\w)\", \"number.hex\"]\n    ],\n    units: [\n      [\n        \"(em|ex|ch|rem|fr|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?\",\n        \"number\",\n        \"@pop\"\n      ]\n    ],\n    functiondeclaration: [\n      [\"@identifier@ws\\\\(\", { token: \"meta\", next: \"@parameterdeclaration\" }],\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@functionbody\" }]\n    ],\n    mixindeclaration: [\n      // mixin with parameters\n      [\"@identifier@ws\\\\(\", { token: \"meta\", next: \"@parameterdeclaration\" }],\n      // mixin without parameters\n      [\"@identifier\", \"meta\"],\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@selectorbody\" }]\n    ],\n    parameterdeclaration: [\n      [\"\\\\$@identifier@ws:\", \"variable.decl\"],\n      [\"\\\\.\\\\.\\\\.\", \"operator\"],\n      // var args in declaration\n      [\",\", \"delimiter\"],\n      { include: \"@term\" },\n      [\"\\\\)\", { token: \"meta\", next: \"@pop\" }]\n    ],\n    includedeclaration: [\n      { include: \"@functioninvocation\" },\n      [\"@identifier\", \"meta\"],\n      [\";\", \"delimiter\", \"@pop\"],\n      [\"(?=})\", { token: \"\", next: \"@pop\" }],\n      // missing semicolon\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@selectorbody\" }]\n    ],\n    keyframedeclaration: [\n      [\"@identifier\", \"meta\"],\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@keyframebody\" }]\n    ],\n    keyframebody: [\n      { include: \"@term\" },\n      [\"{\", { token: \"delimiter.curly\", next: \"@selectorbody\" }],\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\n    ],\n    controlstatement: [\n      [\n        \"[@](if|else|for|while|each|media)\",\n        { token: \"keyword.flow\", next: \"@controlstatementdeclaration\" }\n      ]\n    ],\n    controlstatementdeclaration: [\n      [\"(in|from|through|if|to)\\\\b\", { token: \"keyword.flow\" }],\n      { include: \"@term\" },\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@selectorbody\" }]\n    ],\n    functionbody: [\n      [\"[@](return)\", { token: \"keyword\" }],\n      { include: \"@variabledeclaration\" },\n      { include: \"@term\" },\n      { include: \"@controlstatement\" },\n      [\";\", \"delimiter\"],\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\n    ],\n    functioninvocation: [[\"@identifier\\\\(\", { token: \"meta\", next: \"@functionarguments\" }]],\n    functionarguments: [\n      [\"\\\\$@identifier@ws:\", \"attribute.name\"],\n      [\"[,]\", \"delimiter\"],\n      { include: \"@term\" },\n      [\"\\\\)\", { token: \"meta\", next: \"@pop\" }]\n    ],\n    strings: [\n      ['~?\"', { token: \"string.delimiter\", next: \"@stringenddoublequote\" }],\n      [\"~?'\", { token: \"string.delimiter\", next: \"@stringendquote\" }]\n    ],\n    stringenddoublequote: [\n      [\"\\\\\\\\.\", \"string\"],\n      ['\"', { token: \"string.delimiter\", next: \"@pop\" }],\n      [\".\", \"string\"]\n    ],\n    stringendquote: [\n      [\"\\\\\\\\.\", \"string\"],\n      [\"'\", { token: \"string.delimiter\", next: \"@pop\" }],\n      [\".\", \"string\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","conf","language","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","ws","identifier","token","tokenizer","root","include","selector","next","selectorbody","selectorname","selectorattribute","term","rulevalue","switchTo","nestedproperty","warndebug","import","variabledeclaration","urldeclaration","parenthizedterm","declarationbody","extendbody","variablereference","variableinterpolation","comment","numbers","units","functiondeclaration","mixindeclaration","parameterdeclaration","includedeclaration","keyframedeclaration","keyframebody","controlstatement","controlstatementdeclaration","functionbody","functioninvocation","functionarguments","strings","stringenddoublequote","stringendquote","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"scss.b034b245.js.map"}