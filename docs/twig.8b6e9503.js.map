{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECAA;;;;;+EAK+E,E,I,E,E,kD,E,iB,C,GAyY/E,EAAA,MAAA,CAAA,EAAA,OAAA,IACE,GADF,EAAA,MAAA,CAAA,EAAA,WAAA,IAEE,GAvYF,IAAI,EAAO,CACT,YAAa,iFACb,SAAU,CACR,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,KAAM,KAAK,CACZ,CAAC,KAAM,KAAK,CACZ,CAAC,KAAM,KAAK,CACZ,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CAEV,CAAC,UAAQ,SAAM,CACf,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,MAAO,MAAO,KAAM,EAC5B,CAAE,KAAM,MAAO,MAAO,KAAM,EAC5B,CAAE,KAAM,MAAO,MAAO,KAAM,EAC5B,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IA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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"Qv2nR\":[function(require,module,exports,__globalThis) {\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/twig/twig.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"conf\", ()=>conf);\nparcelHelpers.export(exports, \"language\", ()=>language);\nvar conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: [\n            \"{#\",\n            \"#}\"\n        ]\n    },\n    brackets: [\n        [\n            \"{#\",\n            \"#}\"\n        ],\n        [\n            \"{%\",\n            \"%}\"\n        ],\n        [\n            \"{{\",\n            \"}}\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        // HTML\n        [\n            \"<!--\",\n            \"-->\"\n        ],\n        [\n            \"<\",\n            \">\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{# \",\n            close: \" #}\"\n        },\n        {\n            open: \"{% \",\n            close: \" %}\"\n        },\n        {\n            open: \"{{ \",\n            close: \" }}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        // HTML\n        {\n            open: \"<\",\n            close: \">\"\n        }\n    ]\n};\nvar language = {\n    defaultToken: \"\",\n    tokenPostfix: \"\",\n    ignoreCase: true,\n    keywords: [\n        // (opening) tags\n        \"apply\",\n        \"autoescape\",\n        \"block\",\n        \"deprecated\",\n        \"do\",\n        \"embed\",\n        \"extends\",\n        \"flush\",\n        \"for\",\n        \"from\",\n        \"if\",\n        \"import\",\n        \"include\",\n        \"macro\",\n        \"sandbox\",\n        \"set\",\n        \"use\",\n        \"verbatim\",\n        \"with\",\n        // closing tags\n        \"endapply\",\n        \"endautoescape\",\n        \"endblock\",\n        \"endembed\",\n        \"endfor\",\n        \"endif\",\n        \"endmacro\",\n        \"endsandbox\",\n        \"endset\",\n        \"endwith\",\n        // literals\n        \"true\",\n        \"false\"\n    ],\n    tokenizer: {\n        root: [\n            // whitespace\n            [\n                /\\s+/\n            ],\n            // Twig Tag Delimiters\n            [\n                /{#/,\n                \"comment.twig\",\n                \"@commentState\"\n            ],\n            [\n                /{%[-~]?/,\n                \"delimiter.twig\",\n                \"@blockState\"\n            ],\n            [\n                /{{[-~]?/,\n                \"delimiter.twig\",\n                \"@variableState\"\n            ],\n            // HTML\n            [\n                /<!DOCTYPE/,\n                \"metatag.html\",\n                \"@doctype\"\n            ],\n            [\n                /<!--/,\n                \"comment.html\",\n                \"@comment\"\n            ],\n            [\n                /(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/,\n                [\n                    \"delimiter.html\",\n                    \"tag.html\",\n                    \"\",\n                    \"delimiter.html\"\n                ]\n            ],\n            [\n                /(<)(script)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@script\"\n                    }\n                ]\n            ],\n            [\n                /(<)(style)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@style\"\n                    }\n                ]\n            ],\n            [\n                /(<)((?:[\\w\\-]+:)?[\\w\\-]+)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@otherTag\"\n                    }\n                ]\n            ],\n            [\n                /(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@otherTag\"\n                    }\n                ]\n            ],\n            [\n                /</,\n                \"delimiter.html\"\n            ],\n            [\n                /[^<{]+/\n            ]\n        ],\n        /**\n     * Comment Tag Handling\n     */ commentState: [\n            [\n                /#}/,\n                \"comment.twig\",\n                \"@pop\"\n            ],\n            [\n                /./,\n                \"comment.twig\"\n            ]\n        ],\n        /**\n     * Block Tag Handling\n     */ blockState: [\n            [\n                /[-~]?%}/,\n                \"delimiter.twig\",\n                \"@pop\"\n            ],\n            // whitespace\n            [\n                /\\s+/\n            ],\n            // verbatim\n            // Unlike other blocks, verbatim ehas its own state\n            // transition to ensure we mark its contents as strings.\n            [\n                /(verbatim)(\\s*)([-~]?%})/,\n                [\n                    \"keyword.twig\",\n                    \"\",\n                    {\n                        token: \"delimiter.twig\",\n                        next: \"@rawDataState\"\n                    }\n                ]\n            ],\n            {\n                include: \"expression\"\n            }\n        ],\n        rawDataState: [\n            // endverbatim\n            [\n                /({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/,\n                [\n                    \"delimiter.twig\",\n                    \"\",\n                    \"keyword.twig\",\n                    \"\",\n                    {\n                        token: \"delimiter.twig\",\n                        next: \"@popall\"\n                    }\n                ]\n            ],\n            [\n                /./,\n                \"string.twig\"\n            ]\n        ],\n        /**\n     * Variable Tag Handling\n     */ variableState: [\n            [\n                /[-~]?}}/,\n                \"delimiter.twig\",\n                \"@pop\"\n            ],\n            {\n                include: \"expression\"\n            }\n        ],\n        stringState: [\n            // closing double quoted string\n            [\n                /\"/,\n                \"string.twig\",\n                \"@pop\"\n            ],\n            // interpolation start\n            [\n                /#{\\s*/,\n                \"string.twig\",\n                \"@interpolationState\"\n            ],\n            // string part\n            [\n                /[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/,\n                \"string.twig\"\n            ]\n        ],\n        interpolationState: [\n            // interpolation end\n            [\n                /}/,\n                \"string.twig\",\n                \"@pop\"\n            ],\n            {\n                include: \"expression\"\n            }\n        ],\n        /**\n     * Expression Handling\n     */ expression: [\n            // whitespace\n            [\n                /\\s+/\n            ],\n            // operators - math\n            [\n                /\\+|-|\\/{1,2}|%|\\*{1,2}/,\n                \"operators.twig\"\n            ],\n            // operators - logic\n            [\n                /(and|or|not|b-and|b-xor|b-or)(\\s+)/,\n                [\n                    \"operators.twig\",\n                    \"\"\n                ]\n            ],\n            // operators - comparison (symbols)\n            [\n                /==|!=|<|>|>=|<=/,\n                \"operators.twig\"\n            ],\n            // operators - comparison (words)\n            [\n                /(starts with|ends with|matches)(\\s+)/,\n                [\n                    \"operators.twig\",\n                    \"\"\n                ]\n            ],\n            // operators - containment\n            [\n                /(in)(\\s+)/,\n                [\n                    \"operators.twig\",\n                    \"\"\n                ]\n            ],\n            // operators - test\n            [\n                /(is)(\\s+)/,\n                [\n                    \"operators.twig\",\n                    \"\"\n                ]\n            ],\n            // operators - misc\n            [\n                /\\||~|:|\\.{1,2}|\\?{1,2}/,\n                \"operators.twig\"\n            ],\n            // names\n            [\n                /[^\\W\\d][\\w]*/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword.twig\",\n                        \"@default\": \"variable.twig\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /\\d+(\\.\\d+)?/,\n                \"number.twig\"\n            ],\n            // punctuation\n            [\n                /\\(|\\)|\\[|\\]|{|}|,/,\n                \"delimiter.twig\"\n            ],\n            // strings\n            [\n                /\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/,\n                \"string.twig\"\n            ],\n            // opening double quoted string\n            [\n                /\"/,\n                \"string.twig\",\n                \"@stringState\"\n            ],\n            // misc syntactic constructs\n            // These are not operators per se, but for the purposes of lexical analysis we\n            // can treat them as such.\n            // arrow functions\n            [\n                /=>/,\n                \"operators.twig\"\n            ],\n            // assignment\n            [\n                /=/,\n                \"operators.twig\"\n            ]\n        ],\n        /**\n     * HTML\n     */ doctype: [\n            [\n                /[^>]+/,\n                \"metatag.content.html\"\n            ],\n            [\n                />/,\n                \"metatag.html\",\n                \"@pop\"\n            ]\n        ],\n        comment: [\n            [\n                /-->/,\n                \"comment.html\",\n                \"@pop\"\n            ],\n            [\n                /[^-]+/,\n                \"comment.content.html\"\n            ],\n            [\n                /./,\n                \"comment.content.html\"\n            ]\n        ],\n        otherTag: [\n            [\n                /\\/?>/,\n                \"delimiter.html\",\n                \"@pop\"\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value.html\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value.html\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name.html\"\n            ],\n            [\n                /=/,\n                \"delimiter.html\"\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ]\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [\n                /type/,\n                \"attribute.name.html\",\n                \"@scriptAfterType\"\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value.html\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value.html\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name.html\"\n            ],\n            [\n                /=/,\n                \"delimiter.html\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded\",\n                    nextEmbedded: \"text/javascript\"\n                }\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /(<\\/)(script\\s*)(>)/,\n                [\n                    \"delimiter.html\",\n                    \"tag.html\",\n                    {\n                        token: \"delimiter.html\",\n                        next: \"@pop\"\n                    }\n                ]\n            ]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [\n                /=/,\n                \"delimiter.html\",\n                \"@scriptAfterTypeEquals\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded\",\n                    nextEmbedded: \"text/javascript\"\n                }\n            ],\n            // cover invalid e.g. <script type>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/script\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [\n                /\"([^\"]*)\"/,\n                {\n                    token: \"attribute.value.html\",\n                    switchTo: \"@scriptWithCustomType.$1\"\n                }\n            ],\n            [\n                /'([^']*)'/,\n                {\n                    token: \"attribute.value.html\",\n                    switchTo: \"@scriptWithCustomType.$1\"\n                }\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded\",\n                    nextEmbedded: \"text/javascript\"\n                }\n            ],\n            // cover invalid e.g. <script type=>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/script\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded.$S2\",\n                    nextEmbedded: \"$S2\"\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value.html\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value.html\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name.html\"\n            ],\n            [\n                /=/,\n                \"delimiter.html\"\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/script\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        scriptEmbedded: [\n            [\n                /<\\/script/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\",\n                    nextEmbedded: \"@pop\"\n                }\n            ],\n            [\n                /[^<]+/,\n                \"\"\n            ]\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [\n                /type/,\n                \"attribute.name.html\",\n                \"@styleAfterType\"\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value.html\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value.html\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name.html\"\n            ],\n            [\n                /=/,\n                \"delimiter.html\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded\",\n                    nextEmbedded: \"text/css\"\n                }\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /(<\\/)(style\\s*)(>)/,\n                [\n                    \"delimiter.html\",\n                    \"tag.html\",\n                    {\n                        token: \"delimiter.html\",\n                        next: \"@pop\"\n                    }\n                ]\n            ]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [\n                /=/,\n                \"delimiter.html\",\n                \"@styleAfterTypeEquals\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded\",\n                    nextEmbedded: \"text/css\"\n                }\n            ],\n            // cover invalid e.g. <style type>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/style\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [\n                /\"([^\"]*)\"/,\n                {\n                    token: \"attribute.value.html\",\n                    switchTo: \"@styleWithCustomType.$1\"\n                }\n            ],\n            [\n                /'([^']*)'/,\n                {\n                    token: \"attribute.value.html\",\n                    switchTo: \"@styleWithCustomType.$1\"\n                }\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded\",\n                    nextEmbedded: \"text/css\"\n                }\n            ],\n            // cover invalid e.g. <style type=>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/style\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded.$S2\",\n                    nextEmbedded: \"$S2\"\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value.html\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value.html\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name.html\"\n            ],\n            [\n                /=/,\n                \"delimiter.html\"\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/style\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        styleEmbedded: [\n            [\n                /<\\/style/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\",\n                    nextEmbedded: \"@pop\"\n                }\n            ],\n            [\n                /[^<]+/,\n                \"\"\n            ]\n        ]\n    }\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=twig.8b6e9503.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/twig/twig.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: [\"{#\", \"#}\"]\n  },\n  brackets: [\n    [\"{#\", \"#}\"],\n    [\"{%\", \"%}\"],\n    [\"{{\", \"}}\"],\n    [\"(\", \")\"],\n    [\"[\", \"]\"],\n    // HTML\n    [\"<!--\", \"-->\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{# \", close: \" #}\" },\n    { open: \"{% \", close: \" %}\" },\n    { open: \"{{ \", close: \" }}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    // HTML\n    { open: \"<\", close: \">\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \"\",\n  ignoreCase: true,\n  keywords: [\n    // (opening) tags\n    \"apply\",\n    \"autoescape\",\n    \"block\",\n    \"deprecated\",\n    \"do\",\n    \"embed\",\n    \"extends\",\n    \"flush\",\n    \"for\",\n    \"from\",\n    \"if\",\n    \"import\",\n    \"include\",\n    \"macro\",\n    \"sandbox\",\n    \"set\",\n    \"use\",\n    \"verbatim\",\n    \"with\",\n    // closing tags\n    \"endapply\",\n    \"endautoescape\",\n    \"endblock\",\n    \"endembed\",\n    \"endfor\",\n    \"endif\",\n    \"endmacro\",\n    \"endsandbox\",\n    \"endset\",\n    \"endwith\",\n    // literals\n    \"true\",\n    \"false\"\n  ],\n  tokenizer: {\n    root: [\n      // whitespace\n      [/\\s+/],\n      // Twig Tag Delimiters\n      [/{#/, \"comment.twig\", \"@commentState\"],\n      [/{%[-~]?/, \"delimiter.twig\", \"@blockState\"],\n      [/{{[-~]?/, \"delimiter.twig\", \"@variableState\"],\n      // HTML\n      [/<!DOCTYPE/, \"metatag.html\", \"@doctype\"],\n      [/<!--/, \"comment.html\", \"@comment\"],\n      [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, [\"delimiter.html\", \"tag.html\", \"\", \"delimiter.html\"]],\n      [/(<)(script)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@script\" }]],\n      [/(<)(style)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@style\" }]],\n      [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]],\n      [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]],\n      [/</, \"delimiter.html\"],\n      [/[^<{]+/]\n      // text\n    ],\n    /**\n     * Comment Tag Handling\n     */\n    commentState: [\n      [/#}/, \"comment.twig\", \"@pop\"],\n      [/./, \"comment.twig\"]\n    ],\n    /**\n     * Block Tag Handling\n     */\n    blockState: [\n      [/[-~]?%}/, \"delimiter.twig\", \"@pop\"],\n      // whitespace\n      [/\\s+/],\n      // verbatim\n      // Unlike other blocks, verbatim ehas its own state\n      // transition to ensure we mark its contents as strings.\n      [\n        /(verbatim)(\\s*)([-~]?%})/,\n        [\"keyword.twig\", \"\", { token: \"delimiter.twig\", next: \"@rawDataState\" }]\n      ],\n      { include: \"expression\" }\n    ],\n    rawDataState: [\n      // endverbatim\n      [\n        /({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/,\n        [\"delimiter.twig\", \"\", \"keyword.twig\", \"\", { token: \"delimiter.twig\", next: \"@popall\" }]\n      ],\n      [/./, \"string.twig\"]\n    ],\n    /**\n     * Variable Tag Handling\n     */\n    variableState: [[/[-~]?}}/, \"delimiter.twig\", \"@pop\"], { include: \"expression\" }],\n    stringState: [\n      // closing double quoted string\n      [/\"/, \"string.twig\", \"@pop\"],\n      // interpolation start\n      [/#{\\s*/, \"string.twig\", \"@interpolationState\"],\n      // string part\n      [/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, \"string.twig\"]\n    ],\n    interpolationState: [\n      // interpolation end\n      [/}/, \"string.twig\", \"@pop\"],\n      { include: \"expression\" }\n    ],\n    /**\n     * Expression Handling\n     */\n    expression: [\n      // whitespace\n      [/\\s+/],\n      // operators - math\n      [/\\+|-|\\/{1,2}|%|\\*{1,2}/, \"operators.twig\"],\n      // operators - logic\n      [/(and|or|not|b-and|b-xor|b-or)(\\s+)/, [\"operators.twig\", \"\"]],\n      // operators - comparison (symbols)\n      [/==|!=|<|>|>=|<=/, \"operators.twig\"],\n      // operators - comparison (words)\n      [/(starts with|ends with|matches)(\\s+)/, [\"operators.twig\", \"\"]],\n      // operators - containment\n      [/(in)(\\s+)/, [\"operators.twig\", \"\"]],\n      // operators - test\n      [/(is)(\\s+)/, [\"operators.twig\", \"\"]],\n      // operators - misc\n      [/\\||~|:|\\.{1,2}|\\?{1,2}/, \"operators.twig\"],\n      // names\n      [\n        /[^\\W\\d][\\w]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword.twig\",\n            \"@default\": \"variable.twig\"\n          }\n        }\n      ],\n      // numbers\n      [/\\d+(\\.\\d+)?/, \"number.twig\"],\n      // punctuation\n      [/\\(|\\)|\\[|\\]|{|}|,/, \"delimiter.twig\"],\n      // strings\n      [/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, \"string.twig\"],\n      // opening double quoted string\n      [/\"/, \"string.twig\", \"@stringState\"],\n      // misc syntactic constructs\n      // These are not operators per se, but for the purposes of lexical analysis we\n      // can treat them as such.\n      // arrow functions\n      [/=>/, \"operators.twig\"],\n      // assignment\n      [/=/, \"operators.twig\"]\n    ],\n    /**\n     * HTML\n     */\n    doctype: [\n      [/[^>]+/, \"metatag.content.html\"],\n      [/>/, \"metatag.html\", \"@pop\"]\n    ],\n    comment: [\n      [/-->/, \"comment.html\", \"@pop\"],\n      [/[^-]+/, \"comment.content.html\"],\n      [/./, \"comment.content.html\"]\n    ],\n    otherTag: [\n      [/\\/?>/, \"delimiter.html\", \"@pop\"],\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\n      [/'([^']*)'/, \"attribute.value.html\"],\n      [/[\\w\\-]+/, \"attribute.name.html\"],\n      [/=/, \"delimiter.html\"],\n      [/[ \\t\\r\\n]+/]\n      // whitespace\n    ],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [\n      [/type/, \"attribute.name.html\", \"@scriptAfterType\"],\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\n      [/'([^']*)'/, \"attribute.value.html\"],\n      [/[\\w\\-]+/, \"attribute.name.html\"],\n      [/=/, \"delimiter.html\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded\",\n          nextEmbedded: \"text/javascript\"\n        }\n      ],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [\n        /(<\\/)(script\\s*)(>)/,\n        [\"delimiter.html\", \"tag.html\", { token: \"delimiter.html\", next: \"@pop\" }]\n      ]\n    ],\n    // After <script ... type\n    scriptAfterType: [\n      [/=/, \"delimiter.html\", \"@scriptAfterTypeEquals\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded\",\n          nextEmbedded: \"text/javascript\"\n        }\n      ],\n      // cover invalid e.g. <script type>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <script ... type =\n    scriptAfterTypeEquals: [\n      [\n        /\"([^\"]*)\"/,\n        {\n          token: \"attribute.value.html\",\n          switchTo: \"@scriptWithCustomType.$1\"\n        }\n      ],\n      [\n        /'([^']*)'/,\n        {\n          token: \"attribute.value.html\",\n          switchTo: \"@scriptWithCustomType.$1\"\n        }\n      ],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded\",\n          nextEmbedded: \"text/javascript\"\n        }\n      ],\n      // cover invalid e.g. <script type=>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <script ... type = $S2\n    scriptWithCustomType: [\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded.$S2\",\n          nextEmbedded: \"$S2\"\n        }\n      ],\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\n      [/'([^']*)'/, \"attribute.value.html\"],\n      [/[\\w\\-]+/, \"attribute.name.html\"],\n      [/=/, \"delimiter.html\"],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    scriptEmbedded: [\n      [/<\\/script/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\n      [/[^<]+/, \"\"]\n    ],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [\n      [/type/, \"attribute.name.html\", \"@styleAfterType\"],\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\n      [/'([^']*)'/, \"attribute.value.html\"],\n      [/[\\w\\-]+/, \"attribute.name.html\"],\n      [/=/, \"delimiter.html\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded\",\n          nextEmbedded: \"text/css\"\n        }\n      ],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [\n        /(<\\/)(style\\s*)(>)/,\n        [\"delimiter.html\", \"tag.html\", { token: \"delimiter.html\", next: \"@pop\" }]\n      ]\n    ],\n    // After <style ... type\n    styleAfterType: [\n      [/=/, \"delimiter.html\", \"@styleAfterTypeEquals\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded\",\n          nextEmbedded: \"text/css\"\n        }\n      ],\n      // cover invalid e.g. <style type>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <style ... type =\n    styleAfterTypeEquals: [\n      [\n        /\"([^\"]*)\"/,\n        {\n          token: \"attribute.value.html\",\n          switchTo: \"@styleWithCustomType.$1\"\n        }\n      ],\n      [\n        /'([^']*)'/,\n        {\n          token: \"attribute.value.html\",\n          switchTo: \"@styleWithCustomType.$1\"\n        }\n      ],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded\",\n          nextEmbedded: \"text/css\"\n        }\n      ],\n      // cover invalid e.g. <style type=>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <style ... type = $S2\n    styleWithCustomType: [\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded.$S2\",\n          nextEmbedded: \"$S2\"\n        }\n      ],\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\n      [/'([^']*)'/, \"attribute.value.html\"],\n      [/[\\w\\-]+/, \"attribute.name.html\"],\n      [/=/, \"delimiter.html\"],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    styleEmbedded: [\n      [/<\\/style/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\n      [/[^<]+/, \"\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","conf","language","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","ignoreCase","keywords","tokenizer","root","token","next","commentState","blockState","include","rawDataState","variableState","stringState","interpolationState","expression","cases","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","switchTo","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"twig.8b6e9503.js.map"}