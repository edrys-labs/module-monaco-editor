{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,C,C,ECAA;;;;;+EAK+E,E,I,E,E,kD,E,iB,C,GA8S/E,EAAA,MAAA,CAAA,EAAA,OAAA,IACE,GADF,EAAA,MAAA,CAAA,EAAA,WAAA,IAEE,GA5SF,IAAI,EAAO,CACT,SAAU,CACR,YAAa,IACf,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACvD,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,AACH,EACI,EAAW,CAEb,SAAU,CACR,YACA,OACA,SACA,SACA,KACA,YACA,WACA,OACA,UACA,UACA,SACA,aACA,KACA,OACA,OACA,SACA,QACA,QACA,MACA,KACA,QACA,SACA,OACA,SACA,QACA,UACA,aACA,MACA,MACA,KACA,OACA,OACA,aACA,SACA,YACA,MACA,MACA,KACA,MACA,MACA,MACA,KACA,MACA,SACA,QACA,YACA,UACA,WACD,CACD,aAAc,CACZ,OACA,MACA,SACA,SACA,OACA,SACA,QACA,SACA,QACA,QACD,CACD,gBAAiB,CACf,WACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,UACA,QACA,QACA,WACA,UACA,UACA,WACA,KACA,SACA,OACA,QACA,WACA,SACA,UACA,QACA,QACA,UACA,OACA,WACA,MACA,YACA,OACA,OACA,OACA,SACA,WACA,MACA,WACA,SACA,UACA,YACA,SACA,WACA,MACA,QACA,SACA,QACA,SACA,aACA,SACA,SACA,SACA,OACA,QACA,MACA,SACA,OACA,QACA,YACA,SACA,SACA,UACA,OACA,WACD,CACD,UAAW,CAAC,OAAQ,QAAS,SAAU,SAAU,SAAU,SAAU,MAAO,OAAO,CACnF,QAAS,CACP,IACA,IACA,IACA,IACA,KACA,IACA,IACA,OACA,OACA,QACA,SACA,IACA,QACA,KACA,KACA,KACA,KACA,SACA,MACA,UACA,UACA,IACA,SACA,UACA,SACA,SACA,aACA,cACD,CACD,UAAW,CACT,OACA,KACA,KACA,IACA,KACA,IACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KACA,MACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,KACA,MACA,IACA,KACA,IACA,IACA,KACA,IACA,IACA,KACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,IACA,KACA,MACD,CACD,iBAAkB,CAAC,YAAa,OAAO,CACvC,eAAgB,CAAC,SAAS,CAC1B,QAAS,2BACT,QAAS,WAET,UAAW,CACT,KAAM,CAEJ,CACE,mBACA,CACE,MAAO,CACL,oBAAqB,CACnB,MAAO,aACP,KAAM,YACR,EACA,kBAAmB,CACjB,MAAO,aACP,KAAM,UACR,EACA,gBAAiB,OACjB,YAAa,UACb,aAAc,WACd,WAAY,UACZ,mBAAoB,UACpB,WAAY,YACd,CACF,EACD,CAED,CAAE,QAAS,aAAc,EAEzB,CAAC,aAAc,YAAY,CAC3B,CAAC,WAAY,CAAE,MAAO,CAAE,aAAc,WAAY,WAAY,EAAG,CAAE,EAAE,CAErE,CAAC,2BAA4B,eAAe,CAC5C,CAAC,MAAO,SAAS,CAEjB,CAAC,QAAS,YAAY,CAGtB,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,QAAS,KAAM,SAAU,EAAE,CACpE,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,SAAU,KAAM,MAAO,EAAE,CAClE,CACD,UAAW,CACT,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,YAAY,CAC5B,CAAC,OAAQ,YAAY,CACrB,CAAC,GAAI,GAAI,OAAO,CACjB,CACD,QAAS,CACP,CAAE,QAAS,aAAc,EACzB,CAAC,oBAAqB,YAAY,CAClC,CAAC,cAAe,aAAa,CAC7B,CAAC,KAAM,WAAW,CAClB,CAAC,QAAS,YAAY,CACtB,CAAC,GAAI,GAAI,OAAO,CACjB,CACD,WAAY,CACV,CAAC,aAAc,QAAQ,CACvB,CAAC,WAAY,UAAU,CACxB,AACH,CACF,C,E,C,iD,O,E,C,M,C,S,C,C,C,C,C,C,C,EClTA,EAAQ,cAAc,CAAG,SAAU,CAAC,EAClC,OAAO,GAAK,EAAE,UAAU,CAAG,EAAI,CAAC,QAAS,CAAC,CAC5C,EAEA,EAAQ,iBAAiB,CAAG,SAAU,CAAC,EACrC,OAAO,cAAc,CAAC,EAAG,aAAc,CAAC,MAAO,CAAA,CAAI,EACrD,EAEA,EAAQ,SAAS,CAAG,SAAU,CAAM,CAAE,CAAI,EAkBxC,OAjBA,OAAO,IAAI,CAAC,GAAQ,OAAO,CAAC,SAAU,CAAG,EAE7B,YAAR,GACA,AAAQ,eAAR,GACA,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAM,IAK7C,OAAO,cAAc,CAAC,EAAM,EAAK,CAC/B,WAAY,CAAA,EACZ,IAAK,WACH,OAAO,CAAM,CAAC,EAAI,AACpB,CACF,EACF,GAEO,CACT,EAEA,EAAQ,MAAM,CAAG,SAAU,CAAI,CAAE,CAAQ,CAAE,CAAG,EAC5C,OAAO,cAAc,CAAC,EAAM,EAAU,CACpC,WAAY,CAAA,EACZ,IAAK,CACP,EACF,C,E,C,E,E,E,C,E","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"6abrQ\":[function(require,module,exports,__globalThis) {\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/qsharp/qsharp.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"conf\", ()=>conf);\nparcelHelpers.export(exports, \"language\", ()=>language);\nvar conf = {\n    comments: {\n        lineComment: \"//\"\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ]\n};\nvar language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    keywords: [\n        \"namespace\",\n        \"open\",\n        \"import\",\n        \"export\",\n        \"as\",\n        \"operation\",\n        \"function\",\n        \"body\",\n        \"adjoint\",\n        \"newtype\",\n        \"struct\",\n        \"controlled\",\n        \"if\",\n        \"elif\",\n        \"else\",\n        \"repeat\",\n        \"until\",\n        \"fixup\",\n        \"for\",\n        \"in\",\n        \"while\",\n        \"return\",\n        \"fail\",\n        \"within\",\n        \"apply\",\n        \"Adjoint\",\n        \"Controlled\",\n        \"Adj\",\n        \"Ctl\",\n        \"is\",\n        \"self\",\n        \"auto\",\n        \"distribute\",\n        \"invert\",\n        \"intrinsic\",\n        \"let\",\n        \"set\",\n        \"w/\",\n        \"new\",\n        \"not\",\n        \"and\",\n        \"or\",\n        \"use\",\n        \"borrow\",\n        \"using\",\n        \"borrowing\",\n        \"mutable\",\n        \"internal\"\n    ],\n    typeKeywords: [\n        \"Unit\",\n        \"Int\",\n        \"BigInt\",\n        \"Double\",\n        \"Bool\",\n        \"String\",\n        \"Qubit\",\n        \"Result\",\n        \"Pauli\",\n        \"Range\"\n    ],\n    invalidKeywords: [\n        \"abstract\",\n        \"base\",\n        \"bool\",\n        \"break\",\n        \"byte\",\n        \"case\",\n        \"catch\",\n        \"char\",\n        \"checked\",\n        \"class\",\n        \"const\",\n        \"continue\",\n        \"decimal\",\n        \"default\",\n        \"delegate\",\n        \"do\",\n        \"double\",\n        \"enum\",\n        \"event\",\n        \"explicit\",\n        \"extern\",\n        \"finally\",\n        \"fixed\",\n        \"float\",\n        \"foreach\",\n        \"goto\",\n        \"implicit\",\n        \"int\",\n        \"interface\",\n        \"lock\",\n        \"long\",\n        \"null\",\n        \"object\",\n        \"operator\",\n        \"out\",\n        \"override\",\n        \"params\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"ref\",\n        \"sbyte\",\n        \"sealed\",\n        \"short\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"static\",\n        \"string\",\n        \"switch\",\n        \"this\",\n        \"throw\",\n        \"try\",\n        \"typeof\",\n        \"unit\",\n        \"ulong\",\n        \"unchecked\",\n        \"unsafe\",\n        \"ushort\",\n        \"virtual\",\n        \"void\",\n        \"volatile\"\n    ],\n    constants: [\n        \"true\",\n        \"false\",\n        \"PauliI\",\n        \"PauliX\",\n        \"PauliY\",\n        \"PauliZ\",\n        \"One\",\n        \"Zero\"\n    ],\n    builtin: [\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"H\",\n        \"HY\",\n        \"S\",\n        \"T\",\n        \"SWAP\",\n        \"CNOT\",\n        \"CCNOT\",\n        \"MultiX\",\n        \"R\",\n        \"RFrac\",\n        \"Rx\",\n        \"Ry\",\n        \"Rz\",\n        \"R1\",\n        \"R1Frac\",\n        \"Exp\",\n        \"ExpFrac\",\n        \"Measure\",\n        \"M\",\n        \"MultiM\",\n        \"Message\",\n        \"Length\",\n        \"Assert\",\n        \"AssertProb\",\n        \"AssertEqual\"\n    ],\n    operators: [\n        \"and=\",\n        \"<-\",\n        \"->\",\n        \"*\",\n        \"*=\",\n        \"@\",\n        \"!\",\n        \"^\",\n        \"^=\",\n        \":\",\n        \"::\",\n        \".\",\n        \"..\",\n        \"==\",\n        \"...\",\n        \"=\",\n        \"=>\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\",\n        \"-\",\n        \"-=\",\n        \"!=\",\n        \"or=\",\n        \"%\",\n        \"%=\",\n        \"|\",\n        \"+\",\n        \"+=\",\n        \"?\",\n        \"/\",\n        \"/=\",\n        \"&&&\",\n        \"&&&=\",\n        \"^^^\",\n        \"^^^=\",\n        \">>>\",\n        \">>>=\",\n        \"<<<\",\n        \"<<<=\",\n        \"|||\",\n        \"|||=\",\n        \"~~~\",\n        \"_\",\n        \"w/\",\n        \"w/=\"\n    ],\n    namespaceFollows: [\n        \"namespace\",\n        \"open\"\n    ],\n    importsFollows: [\n        \"import\"\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n    escapes: /\\\\[\\s\\S]/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_$][\\w$]*/,\n                {\n                    cases: {\n                        \"@namespaceFollows\": {\n                            token: \"keyword.$0\",\n                            next: \"@namespace\"\n                        },\n                        \"@importsFollows\": {\n                            token: \"keyword.$0\",\n                            next: \"@imports\"\n                        },\n                        \"@typeKeywords\": \"type\",\n                        \"@keywords\": \"keyword\",\n                        \"@constants\": \"constant\",\n                        \"@builtin\": \"keyword\",\n                        \"@invalidKeywords\": \"invalid\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // delimiters and operators\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"operator\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /\\d*\\.\\d+([eE][\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /\\d+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // strings\n            //[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-terminated string\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@open\",\n                    next: \"@string\"\n                }\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        namespace: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /[A-Za-z]\\w*/,\n                \"namespace\"\n            ],\n            [\n                /[\\.]/,\n                \"delimiter\"\n            ],\n            [\n                \"\",\n                \"\",\n                \"@pop\"\n            ]\n        ],\n        imports: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /[A-Za-z]\\w*(?=\\.)/,\n                \"namespace\"\n            ],\n            [\n                /[A-Za-z]\\w*/,\n                \"identifier\"\n            ],\n            [\n                /\\*/,\n                \"wildcard\"\n            ],\n            [\n                /[\\.,]/,\n                \"delimiter\"\n            ],\n            [\n                \"\",\n                \"\",\n                \"@pop\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"white\"\n            ],\n            [\n                /(\\/\\/).*/,\n                \"comment\"\n            ]\n        ]\n    }\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=qsharp.f5050de3.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.0(f6dc0eb8fce67e57f6036f4769d92c1666cdf546)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/qsharp/qsharp.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  keywords: [\n    \"namespace\",\n    \"open\",\n    \"import\",\n    \"export\",\n    \"as\",\n    \"operation\",\n    \"function\",\n    \"body\",\n    \"adjoint\",\n    \"newtype\",\n    \"struct\",\n    \"controlled\",\n    \"if\",\n    \"elif\",\n    \"else\",\n    \"repeat\",\n    \"until\",\n    \"fixup\",\n    \"for\",\n    \"in\",\n    \"while\",\n    \"return\",\n    \"fail\",\n    \"within\",\n    \"apply\",\n    \"Adjoint\",\n    \"Controlled\",\n    \"Adj\",\n    \"Ctl\",\n    \"is\",\n    \"self\",\n    \"auto\",\n    \"distribute\",\n    \"invert\",\n    \"intrinsic\",\n    \"let\",\n    \"set\",\n    \"w/\",\n    \"new\",\n    \"not\",\n    \"and\",\n    \"or\",\n    \"use\",\n    \"borrow\",\n    \"using\",\n    \"borrowing\",\n    \"mutable\",\n    \"internal\"\n  ],\n  typeKeywords: [\n    \"Unit\",\n    \"Int\",\n    \"BigInt\",\n    \"Double\",\n    \"Bool\",\n    \"String\",\n    \"Qubit\",\n    \"Result\",\n    \"Pauli\",\n    \"Range\"\n  ],\n  invalidKeywords: [\n    \"abstract\",\n    \"base\",\n    \"bool\",\n    \"break\",\n    \"byte\",\n    \"case\",\n    \"catch\",\n    \"char\",\n    \"checked\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"decimal\",\n    \"default\",\n    \"delegate\",\n    \"do\",\n    \"double\",\n    \"enum\",\n    \"event\",\n    \"explicit\",\n    \"extern\",\n    \"finally\",\n    \"fixed\",\n    \"float\",\n    \"foreach\",\n    \"goto\",\n    \"implicit\",\n    \"int\",\n    \"interface\",\n    \"lock\",\n    \"long\",\n    \"null\",\n    \"object\",\n    \"operator\",\n    \"out\",\n    \"override\",\n    \"params\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"readonly\",\n    \"ref\",\n    \"sbyte\",\n    \"sealed\",\n    \"short\",\n    \"sizeof\",\n    \"stackalloc\",\n    \"static\",\n    \"string\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"try\",\n    \"typeof\",\n    \"unit\",\n    \"ulong\",\n    \"unchecked\",\n    \"unsafe\",\n    \"ushort\",\n    \"virtual\",\n    \"void\",\n    \"volatile\"\n  ],\n  constants: [\"true\", \"false\", \"PauliI\", \"PauliX\", \"PauliY\", \"PauliZ\", \"One\", \"Zero\"],\n  builtin: [\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"H\",\n    \"HY\",\n    \"S\",\n    \"T\",\n    \"SWAP\",\n    \"CNOT\",\n    \"CCNOT\",\n    \"MultiX\",\n    \"R\",\n    \"RFrac\",\n    \"Rx\",\n    \"Ry\",\n    \"Rz\",\n    \"R1\",\n    \"R1Frac\",\n    \"Exp\",\n    \"ExpFrac\",\n    \"Measure\",\n    \"M\",\n    \"MultiM\",\n    \"Message\",\n    \"Length\",\n    \"Assert\",\n    \"AssertProb\",\n    \"AssertEqual\"\n  ],\n  operators: [\n    \"and=\",\n    \"<-\",\n    \"->\",\n    \"*\",\n    \"*=\",\n    \"@\",\n    \"!\",\n    \"^\",\n    \"^=\",\n    \":\",\n    \"::\",\n    \".\",\n    \"..\",\n    \"==\",\n    \"...\",\n    \"=\",\n    \"=>\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"-\",\n    \"-=\",\n    \"!=\",\n    \"or=\",\n    \"%\",\n    \"%=\",\n    \"|\",\n    \"+\",\n    \"+=\",\n    \"?\",\n    \"/\",\n    \"/=\",\n    \"&&&\",\n    \"&&&=\",\n    \"^^^\",\n    \"^^^=\",\n    \">>>\",\n    \">>>=\",\n    \"<<<\",\n    \"<<<=\",\n    \"|||\",\n    \"|||=\",\n    \"~~~\",\n    \"_\",\n    \"w/\",\n    \"w/=\"\n  ],\n  namespaceFollows: [\"namespace\", \"open\"],\n  importsFollows: [\"import\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n  escapes: /\\\\[\\s\\S]/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [\n        /[a-zA-Z_$][\\w$]*/,\n        {\n          cases: {\n            \"@namespaceFollows\": {\n              token: \"keyword.$0\",\n              next: \"@namespace\"\n            },\n            \"@importsFollows\": {\n              token: \"keyword.$0\",\n              next: \"@imports\"\n            },\n            \"@typeKeywords\": \"type\",\n            \"@keywords\": \"keyword\",\n            \"@constants\": \"constant\",\n            \"@builtin\": \"keyword\",\n            \"@invalidKeywords\": \"invalid\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }],\n      // numbers\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      //[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-terminated string\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    namespace: [\n      { include: \"@whitespace\" },\n      [/[A-Za-z]\\w*/, \"namespace\"],\n      [/[\\.]/, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    imports: [\n      { include: \"@whitespace\" },\n      [/[A-Za-z]\\w*(?=\\.)/, \"namespace\"],\n      [/[A-Za-z]\\w*/, \"identifier\"],\n      [/\\*/, \"wildcard\"],\n      [/[\\.,]/, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(\\/\\/).*/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","keywords","typeKeywords","invalidKeywords","constants","builtin","operators","namespaceFollows","importsFollows","symbols","escapes","tokenizer","root","cases","token","next","include","bracket","string","namespace","imports","whitespace","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"qsharp.f5050de3.js.map"}